// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/21/2013 22:30:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Simple
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Simple_vlg_sample_tst(
	A,
	B,
	zero,
	sampler_tx
);
input  A;
input  B;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Simple_vlg_check_tst (
	aout,
	bout,
	dir,
	LEDG0,
	LEDG1,
	LEDG2,
	LEDG3,
	LEDG4,
	LEDG5,
	LEDG6,
	LEDG7,
	sampler_rx
);
input  aout;
input  bout;
input  dir;
input  LEDG0;
input  LEDG1;
input  LEDG2;
input  LEDG3;
input  LEDG4;
input  LEDG5;
input  LEDG6;
input  LEDG7;
input sampler_rx;

reg  aout_expected;
reg  bout_expected;
reg  dir_expected;
reg  LEDG0_expected;
reg  LEDG1_expected;
reg  LEDG2_expected;
reg  LEDG3_expected;
reg  LEDG4_expected;
reg  LEDG5_expected;
reg  LEDG6_expected;
reg  LEDG7_expected;

reg  aout_prev;
reg  bout_prev;
reg  dir_prev;
reg  LEDG0_prev;
reg  LEDG1_prev;
reg  LEDG2_prev;
reg  LEDG3_prev;
reg  LEDG4_prev;
reg  LEDG5_prev;
reg  LEDG6_prev;
reg  LEDG7_prev;

reg  aout_expected_prev;
reg  bout_expected_prev;
reg  dir_expected_prev;
reg  LEDG0_expected_prev;
reg  LEDG1_expected_prev;
reg  LEDG2_expected_prev;
reg  LEDG3_expected_prev;
reg  LEDG4_expected_prev;
reg  LEDG5_expected_prev;
reg  LEDG6_expected_prev;
reg  LEDG7_expected_prev;

reg  last_aout_exp;
reg  last_bout_exp;
reg  last_dir_exp;
reg  last_LEDG0_exp;
reg  last_LEDG1_exp;
reg  last_LEDG2_exp;
reg  last_LEDG3_exp;
reg  last_LEDG4_exp;
reg  last_LEDG5_exp;
reg  last_LEDG6_exp;
reg  last_LEDG7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	aout_prev = aout;
	bout_prev = bout;
	dir_prev = dir;
	LEDG0_prev = LEDG0;
	LEDG1_prev = LEDG1;
	LEDG2_prev = LEDG2;
	LEDG3_prev = LEDG3;
	LEDG4_prev = LEDG4;
	LEDG5_prev = LEDG5;
	LEDG6_prev = LEDG6;
	LEDG7_prev = LEDG7;
end

// update expected /o prevs

always @(trigger)
begin
	aout_expected_prev = aout_expected;
	bout_expected_prev = bout_expected;
	dir_expected_prev = dir_expected;
	LEDG0_expected_prev = LEDG0_expected;
	LEDG1_expected_prev = LEDG1_expected;
	LEDG2_expected_prev = LEDG2_expected;
	LEDG3_expected_prev = LEDG3_expected;
	LEDG4_expected_prev = LEDG4_expected;
	LEDG5_expected_prev = LEDG5_expected;
	LEDG6_expected_prev = LEDG6_expected;
	LEDG7_expected_prev = LEDG7_expected;
end



// expected dir
initial
begin
	dir_expected = 1'bX;
	dir_expected = #999000 1'b0;
end 

// expected LEDG0
initial
begin
	LEDG0_expected = 1'bX;
	LEDG0_expected = #999000 1'b0;
end 

// expected LEDG1
initial
begin
	LEDG1_expected = 1'bX;
	LEDG1_expected = #999000 1'b0;
end 

// expected LEDG2
initial
begin
	LEDG2_expected = 1'bX;
	LEDG2_expected = #999000 1'b0;
end 

// expected LEDG3
initial
begin
	LEDG3_expected = 1'bX;
	LEDG3_expected = #999000 1'b0;
end 

// expected LEDG4
initial
begin
	LEDG4_expected = 1'bX;
	LEDG4_expected = #999000 1'b0;
end 

// expected LEDG5
initial
begin
	LEDG5_expected = 1'bX;
	LEDG5_expected = #999000 1'b0;
end 

// expected LEDG6
initial
begin
	LEDG6_expected = 1'bX;
	LEDG6_expected = #999000 1'b0;
end 

// expected LEDG7
initial
begin
	LEDG7_expected = 1'bX;
	LEDG7_expected = #999000 1'b0;
end 

// expected aout
initial
begin
	aout_expected = 1'bX;
	aout_expected = #999000 1'b0;
end 

// expected bout
initial
begin
	bout_expected = 1'bX;
	bout_expected = #999000 1'b0;
end 
// generate trigger
always @(aout_expected or aout or bout_expected or bout or dir_expected or dir or LEDG0_expected or LEDG0 or LEDG1_expected or LEDG1 or LEDG2_expected or LEDG2 or LEDG3_expected or LEDG3 or LEDG4_expected or LEDG4 or LEDG5_expected or LEDG5 or LEDG6_expected or LEDG6 or LEDG7_expected or LEDG7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aout = %b | expected bout = %b | expected dir = %b | expected LEDG0 = %b | expected LEDG1 = %b | expected LEDG2 = %b | expected LEDG3 = %b | expected LEDG4 = %b | expected LEDG5 = %b | expected LEDG6 = %b | expected LEDG7 = %b | ",aout_expected_prev,bout_expected_prev,dir_expected_prev,LEDG0_expected_prev,LEDG1_expected_prev,LEDG2_expected_prev,LEDG3_expected_prev,LEDG4_expected_prev,LEDG5_expected_prev,LEDG6_expected_prev,LEDG7_expected_prev);
	$display("| real aout = %b | real bout = %b | real dir = %b | real LEDG0 = %b | real LEDG1 = %b | real LEDG2 = %b | real LEDG3 = %b | real LEDG4 = %b | real LEDG5 = %b | real LEDG6 = %b | real LEDG7 = %b | ",aout_prev,bout_prev,dir_prev,LEDG0_prev,LEDG1_prev,LEDG2_prev,LEDG3_prev,LEDG4_prev,LEDG5_prev,LEDG6_prev,LEDG7_prev);
`endif
	if (
		( aout_expected_prev !== 1'bx ) && ( aout_prev !== aout_expected_prev )
		&& ((aout_expected_prev !== last_aout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aout_expected_prev);
		$display ("     Real value = %b", aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aout_exp = aout_expected_prev;
	end
	if (
		( bout_expected_prev !== 1'bx ) && ( bout_prev !== bout_expected_prev )
		&& ((bout_expected_prev !== last_bout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bout_expected_prev);
		$display ("     Real value = %b", bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bout_exp = bout_expected_prev;
	end
	if (
		( dir_expected_prev !== 1'bx ) && ( dir_prev !== dir_expected_prev )
		&& ((dir_expected_prev !== last_dir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dir_expected_prev);
		$display ("     Real value = %b", dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dir_exp = dir_expected_prev;
	end
	if (
		( LEDG0_expected_prev !== 1'bx ) && ( LEDG0_prev !== LEDG0_expected_prev )
		&& ((LEDG0_expected_prev !== last_LEDG0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG0_expected_prev);
		$display ("     Real value = %b", LEDG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LEDG0_exp = LEDG0_expected_prev;
	end
	if (
		( LEDG1_expected_prev !== 1'bx ) && ( LEDG1_prev !== LEDG1_expected_prev )
		&& ((LEDG1_expected_prev !== last_LEDG1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG1_expected_prev);
		$display ("     Real value = %b", LEDG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LEDG1_exp = LEDG1_expected_prev;
	end
	if (
		( LEDG2_expected_prev !== 1'bx ) && ( LEDG2_prev !== LEDG2_expected_prev )
		&& ((LEDG2_expected_prev !== last_LEDG2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG2_expected_prev);
		$display ("     Real value = %b", LEDG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LEDG2_exp = LEDG2_expected_prev;
	end
	if (
		( LEDG3_expected_prev !== 1'bx ) && ( LEDG3_prev !== LEDG3_expected_prev )
		&& ((LEDG3_expected_prev !== last_LEDG3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG3_expected_prev);
		$display ("     Real value = %b", LEDG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG3_exp = LEDG3_expected_prev;
	end
	if (
		( LEDG4_expected_prev !== 1'bx ) && ( LEDG4_prev !== LEDG4_expected_prev )
		&& ((LEDG4_expected_prev !== last_LEDG4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG4_expected_prev);
		$display ("     Real value = %b", LEDG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDG4_exp = LEDG4_expected_prev;
	end
	if (
		( LEDG5_expected_prev !== 1'bx ) && ( LEDG5_prev !== LEDG5_expected_prev )
		&& ((LEDG5_expected_prev !== last_LEDG5_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG5_expected_prev);
		$display ("     Real value = %b", LEDG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG5_exp = LEDG5_expected_prev;
	end
	if (
		( LEDG6_expected_prev !== 1'bx ) && ( LEDG6_prev !== LEDG6_expected_prev )
		&& ((LEDG6_expected_prev !== last_LEDG6_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG6_expected_prev);
		$display ("     Real value = %b", LEDG6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDG6_exp = LEDG6_expected_prev;
	end
	if (
		( LEDG7_expected_prev !== 1'bx ) && ( LEDG7_prev !== LEDG7_expected_prev )
		&& ((LEDG7_expected_prev !== last_LEDG7_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_expected_prev);
		$display ("     Real value = %b", LEDG7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDG7_exp = LEDG7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Simple_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg zero;
// wires                                               
wire aout;
wire bout;
wire dir;
wire LEDG0;
wire LEDG1;
wire LEDG2;
wire LEDG3;
wire LEDG4;
wire LEDG5;
wire LEDG6;
wire LEDG7;

wire sampler;                             

// assign statements (if any)                          
Simple i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.aout(aout),
	.B(B),
	.bout(bout),
	.dir(dir),
	.LEDG0(LEDG0),
	.LEDG1(LEDG1),
	.LEDG2(LEDG2),
	.LEDG3(LEDG3),
	.LEDG4(LEDG4),
	.LEDG5(LEDG5),
	.LEDG6(LEDG6),
	.LEDG7(LEDG7),
	.zero(zero)
);

// zero
initial
begin
	zero = 1'b1;
	zero = #5000000 1'b0;
	zero = #1000000 1'b1;
end 

// A
initial
begin
	repeat(5)
	begin
		A = 1'b0;
		A = #500000 1'b1;
		# 500000;
	end
	A = 1'b0;
	A = #2500000 1'b1;
	# 500000;
	repeat(23)
	begin
		A = 1'b0;
		A = #500000 1'b1;
		# 500000;
	end
	A = 1'b0;
	A = #3000000 1'b1;
	# 500000;
	repeat(4)
	begin
		A = 1'b0;
		A = #500000 1'b1;
		# 500000;
	end
	A = 1'b0;
	A = #500000 1'b1;
	A = #1000000 1'b0;
	A = #500000 1'b1;
	# 500000;
	repeat(9)
	begin
		A = 1'b0;
		A = #500000 1'b1;
		# 500000;
	end
	A = 1'b0;
	A = #500000 1'b1;
	A = #1500000 1'b0;
	A = #500000 1'b1;
	# 500000;
	repeat(47)
	begin
		A = 1'b0;
		A = #500000 1'b1;
		# 500000;
	end
end 

// B
initial
begin
	B = 1'b0;
	B = #250000 1'b1;
	# 500000;
	repeat(4)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
	B = #2500000 1'b1;
	# 500000;
	repeat(9)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
	B = #1000000 1'b1;
	B = #500000 1'b0;
	B = #500000 1'b1;
	# 500000;
	repeat(7)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
	B = #1000000 1'b1;
	# 500000;
	repeat(11)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
	B = #4500000 1'b1;
	# 500000;
	repeat(6)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
	B = #500000 1'b1;
	# 2000000;
	repeat(4)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
	B = #500000 1'b1;
	B = #1000000 1'b0;
	B = #500000 1'b1;
	# 500000;
	repeat(41)
	begin
		B = 1'b0;
		B = #500000 1'b1;
		# 500000;
	end
	B = 1'b0;
end 

Simple_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.zero(zero),
	.sampler_tx(sampler)
);

Simple_vlg_check_tst tb_out(
	.aout(aout),
	.bout(bout),
	.dir(dir),
	.LEDG0(LEDG0),
	.LEDG1(LEDG1),
	.LEDG2(LEDG2),
	.LEDG3(LEDG3),
	.LEDG4(LEDG4),
	.LEDG5(LEDG5),
	.LEDG6(LEDG6),
	.LEDG7(LEDG7),
	.sampler_rx(sampler)
);
endmodule

