// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2020 10:56:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block3_vlg_sample_tst(
	ClockIn,
	EnableIn,
	N0,
	N1,
	N2,
	N3,
	N4,
	N5,
	N6,
	N7,
	N8,
	N9,
	sampler_tx
);
input  ClockIn;
input  EnableIn;
input  N0;
input  N1;
input  N2;
input  N3;
input  N4;
input  N5;
input  N6;
input  N7;
input  N8;
input  N9;
output sampler_tx;

reg sample;
time current_time;
always @(ClockIn or EnableIn or N0 or N1 or N2 or N3 or N4 or N5 or N6 or N7 or N8 or N9)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block3_vlg_check_tst (
	Led0,
	sampler_rx
);
input  Led0;
input sampler_rx;

reg  Led0_expected;

reg  Led0_prev;

reg  Led0_expected_prev;

reg  last_Led0_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Led0_prev = Led0;
end

// update expected /o prevs

always @(trigger)
begin
	Led0_expected_prev = Led0_expected;
end



// expected Led0
initial
begin
	Led0_expected = 1'bX;
end 
// generate trigger
always @(Led0_expected or Led0)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Led0 = %b | ",Led0_expected_prev);
	$display("| real Led0 = %b | ",Led0_prev);
`endif
	if (
		( Led0_expected_prev !== 1'bx ) && ( Led0_prev !== Led0_expected_prev )
		&& ((Led0_expected_prev !== last_Led0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led0_expected_prev);
		$display ("     Real value = %b", Led0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Led0_exp = Led0_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ClockIn;
reg EnableIn;
reg N0;
reg N1;
reg N2;
reg N3;
reg N4;
reg N5;
reg N6;
reg N7;
reg N8;
reg N9;
// wires                                               
wire Led0;

wire sampler;                             

// assign statements (if any)                          
Block3 i1 (
// port map - connection between master ports and signals/registers   
	.ClockIn(ClockIn),
	.EnableIn(EnableIn),
	.Led0(Led0),
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.N3(N3),
	.N4(N4),
	.N5(N5),
	.N6(N6),
	.N7(N7),
	.N8(N8),
	.N9(N9)
);

// ClockIn
always
begin
	ClockIn = 1'b0;
	ClockIn = #500000 1'b1;
	#500000;
end 

// EnableIn
initial
begin
	EnableIn = 1'b1;
end 

// N0
initial
begin
	N0 = 1'b1;
	N0 = #15000000 1'b0;
end 

// N1
initial
begin
	N1 = 1'b0;
	N1 = #15000000 1'b1;
end 

// N2
initial
begin
	N2 = 1'b1;
	N2 = #15000000 1'b0;
end 

// N3
initial
begin
	N3 = 1'b0;
	N3 = #15000000 1'b1;
end 

// N4
initial
begin
	N4 = 1'b0;
end 

// N5
initial
begin
	N5 = 1'b0;
end 

// N6
initial
begin
	N6 = 1'b0;
end 

// N7
initial
begin
	N7 = 1'b0;
end 

// N8
initial
begin
	N8 = 1'b0;
end 

// N9
initial
begin
	N9 = 1'b0;
end 

Block3_vlg_sample_tst tb_sample (
	.ClockIn(ClockIn),
	.EnableIn(EnableIn),
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.N3(N3),
	.N4(N4),
	.N5(N5),
	.N6(N6),
	.N7(N7),
	.N8(N8),
	.N9(N9),
	.sampler_tx(sampler)
);

Block3_vlg_check_tst tb_out(
	.Led0(Led0),
	.sampler_rx(sampler)
);
endmodule

