// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2020 18:41:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    count8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module count8_vlg_sample_tst(
	clock,
	enable,
	entern,
	sampler_tx
);
input  clock;
input  enable;
input  entern;
output sampler_tx;

reg sample;
time current_time;
always @(clock or enable or entern)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module count8_vlg_check_tst (
	mod8,
	timesupN,
	sampler_rx
);
input [2:0] mod8;
input  timesupN;
input sampler_rx;

reg [2:0] mod8_expected;
reg  timesupN_expected;

reg [2:0] mod8_prev;
reg  timesupN_prev;

reg [2:0] mod8_expected_prev;
reg  timesupN_expected_prev;

reg [2:0] last_mod8_exp;
reg  last_timesupN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	mod8_prev = mod8;
	timesupN_prev = timesupN;
end

// update expected /o prevs

always @(trigger)
begin
	mod8_expected_prev = mod8_expected;
	timesupN_expected_prev = timesupN_expected;
end


// expected mod8[ 2 ]
initial
begin
	mod8_expected[2] = 1'bX;
end 
// expected mod8[ 1 ]
initial
begin
	mod8_expected[1] = 1'bX;
end 
// expected mod8[ 0 ]
initial
begin
	mod8_expected[0] = 1'bX;
end 

// expected timesupN
initial
begin
	timesupN_expected = 1'bX;
end 
// generate trigger
always @(mod8_expected or mod8 or timesupN_expected or timesupN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mod8 = %b | expected timesupN = %b | ",mod8_expected_prev,timesupN_expected_prev);
	$display("| real mod8 = %b | real timesupN = %b | ",mod8_prev,timesupN_prev);
`endif
	if (
		( mod8_expected_prev[0] !== 1'bx ) && ( mod8_prev[0] !== mod8_expected_prev[0] )
		&& ((mod8_expected_prev[0] !== last_mod8_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mod8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mod8_expected_prev);
		$display ("     Real value = %b", mod8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mod8_exp[0] = mod8_expected_prev[0];
	end
	if (
		( mod8_expected_prev[1] !== 1'bx ) && ( mod8_prev[1] !== mod8_expected_prev[1] )
		&& ((mod8_expected_prev[1] !== last_mod8_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mod8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mod8_expected_prev);
		$display ("     Real value = %b", mod8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mod8_exp[1] = mod8_expected_prev[1];
	end
	if (
		( mod8_expected_prev[2] !== 1'bx ) && ( mod8_prev[2] !== mod8_expected_prev[2] )
		&& ((mod8_expected_prev[2] !== last_mod8_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mod8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mod8_expected_prev);
		$display ("     Real value = %b", mod8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mod8_exp[2] = mod8_expected_prev[2];
	end
	if (
		( timesupN_expected_prev !== 1'bx ) && ( timesupN_prev !== timesupN_expected_prev )
		&& ((timesupN_expected_prev !== last_timesupN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timesupN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timesupN_expected_prev);
		$display ("     Real value = %b", timesupN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_timesupN_exp = timesupN_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module count8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg entern;
// wires                                               
wire [2:0] mod8;
wire timesupN;

wire sampler;                             

// assign statements (if any)                          
count8 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.entern(entern),
	.mod8(mod8),
	.timesupN(timesupN)
);

// clock
initial
begin
	clock = 1'b1;
	clock = #500000 1'b0;
	# 500000;
	repeat(6)
	begin
		clock = 1'b1;
		clock = #500000 1'b0;
		# 500000;
	end
	clock = 1'b1;
	clock = #500000 1'b0;
	clock = #417928 1'b1;
	clock = #582072 1'b0;
	# 500000;
	repeat(40)
	begin
		clock = 1'b1;
		clock = #500000 1'b0;
		# 500000;
	end
	clock = 1'b1;
	clock = #500000 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #3447029 1'b1;
	enable = #648451 1'b0;
	enable = #3378770 1'b1;
	enable = #648452 1'b0;
	enable = #3276384 1'b1;
	enable = #716709 1'b0;
	enable = #7269477 1'b1;
	enable = #716709 1'b0;
	enable = #3310512 1'b1;
	enable = #750839 1'b0;
	enable = #3037481 1'b1;
	enable = #921483 1'b0;
	enable = #3071610 1'b1;
	enable = #853225 1'b0;
	enable = #3105739 1'b1;
	enable = #887354 1'b0;
	enable = #3071610 1'b1;
	enable = #989741 1'b0;
	enable = #3003352 1'b1;
	enable = #1057999 1'b0;
	enable = #2969223 1'b1;
	enable = #921483 1'b0;
end 

// entern
initial
begin
	entern = 1'b1;
	entern = #12661859 1'b0;
	entern = #5870188 1'b1;
	entern = #26467953 1'b0;
	entern = #4000000 1'b1;
end 

count8_vlg_sample_tst tb_sample (
	.clock(clock),
	.enable(enable),
	.entern(entern),
	.sampler_tx(sampler)
);

count8_vlg_check_tst tb_out(
	.mod8(mod8),
	.timesupN(timesupN),
	.sampler_rx(sampler)
);
endmodule

