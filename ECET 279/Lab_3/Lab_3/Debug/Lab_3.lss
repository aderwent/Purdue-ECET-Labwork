
Lab_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000024e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001007  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d17  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057b  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d5  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e5  00000000  00000000  00002c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e4       	ldi	r30, 0x4E	; 78
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	05 d0       	rcall	.+10     	; 0x11a <main>
 110:	9c c0       	rjmp	.+312    	; 0x24a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <io_init>:
    }
}

void io_init(void)
{	
	DDRC = 0x00;	//set PORTC to input
 114:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;	//initialize PORTC as no input (pullups in place)
 116:	18 b8       	out	0x08, r1	; 8
 118:	08 95       	ret

0000011a <main>:
void io_init(void);	// initialize pushbutton input

int main(void)
{
    uint8_t n = 2;	// specify number of repetitions desired
	io_init();		// initialize IO ports
 11a:	fc df       	rcall	.-8      	; 0x114 <io_init>
	uint8_t PushButton = PINC;	// define PushButton for switch
 11c:	86 b1       	in	r24, 0x06	; 6
    while (1)
    {
		// continuously update PushButton when switch is not active
		PushButton = PINC & ( (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3));
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	8f 70       	andi	r24, 0x0F	; 15
		switch (PushButton)
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	69 f0       	breq	.+26     	; 0x140 <main+0x26>
 126:	18 f4       	brcc	.+6      	; 0x12e <main+0x14>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	31 f0       	breq	.+12     	; 0x138 <main+0x1e>
 12c:	12 c0       	rjmp	.+36     	; 0x152 <main+0x38>
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	59 f0       	breq	.+22     	; 0x148 <main+0x2e>
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	69 f0       	breq	.+26     	; 0x150 <main+0x36>
 136:	0d c0       	rjmp	.+26     	; 0x152 <main+0x38>
		{
			case Wave_Step:			//if SW0, start wave step mode
			{
				//Tell the driver to operate in Wave mode for n repetitions
				Stepper_Drive('W',n);
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	87 e5       	ldi	r24, 0x57	; 87
 13c:	0c d0       	rcall	.+24     	; 0x156 <Stepper_Drive>
				break;
 13e:	09 c0       	rjmp	.+18     	; 0x152 <main+0x38>
			}
			case Full_Step:			//if SW1, start full step mode
			{
				//Tell the driver to operate in Full mode for n repetitions
				Stepper_Drive('F',n);	
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	86 e4       	ldi	r24, 0x46	; 70
 144:	08 d0       	rcall	.+16     	; 0x156 <Stepper_Drive>
				break;
			}
			case Half_Step:			//if SW2, start half step mode
			{
				//Tell the driver to operate in Half mode for n repetitions
				Stepper_Drive('H',n);	
 146:	05 c0       	rjmp	.+10     	; 0x152 <main+0x38>
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	88 e4       	ldi	r24, 0x48	; 72
				break;
 14c:	04 d0       	rcall	.+8      	; 0x156 <Stepper_Drive>
			}
			case Set_Angle:			//if SW3, rotate specified angle
			{
				//Tell the driver to move the motor a specific angle
				Stepper_Position();
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0x38>
 150:	62 d0       	rcall	.+196    	; 0x216 <Stepper_Position>
				break;
			}
		}
		Stepper_Output = 0x00;		//clear output when done
 152:	12 b8       	out	0x02, r1	; 2
    }
 154:	e4 cf       	rjmp	.-56     	; 0x11e <main+0x4>

00000156 <Stepper_Drive>:
void Stepper_Drive(char mode, uint8_t revolutions)
{
	uint16_t steps;	//initialize steps variable
	
	// begin switch statement to determine which mode to use
	switch (mode)
 156:	88 34       	cpi	r24, 0x48	; 72
 158:	09 f4       	brne	.+2      	; 0x15c <Stepper_Drive+0x6>
 15a:	40 c0       	rjmp	.+128    	; 0x1dc <Stepper_Drive+0x86>
 15c:	87 35       	cpi	r24, 0x57	; 87
 15e:	21 f0       	breq	.+8      	; 0x168 <Stepper_Drive+0x12>
 160:	86 34       	cpi	r24, 0x46	; 70
 162:	09 f0       	breq	.+2      	; 0x166 <Stepper_Drive+0x10>
 164:	57 c0       	rjmp	.+174    	; 0x214 <Stepper_Drive+0xbe>
 166:	1d c0       	rjmp	.+58     	; 0x1a2 <Stepper_Drive+0x4c>
	{
		//if wave step is selected
		case 'W':
			//number of steps for 1 revolution * # of revolutions
			steps = 512 * revolutions;
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	56 2f       	mov	r21, r22
 16c:	55 0f       	add	r21, r21
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	13 c0       	rjmp	.+38     	; 0x19a <Stepper_Drive+0x44>
			{
				// cycle through the values stored in the Wave array
				for (uint8_t j = 0; j < 4; j++)
				{
					Stepper_Output = Wave[j];
 174:	e8 2f       	mov	r30, r24
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e4 5f       	subi	r30, 0xF4	; 244
 17a:	fd 4f       	sbci	r31, 0xFD	; 253
 17c:	90 81       	ld	r25, Z
 17e:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	ef eb       	ldi	r30, 0xBF	; 191
 182:	fd e5       	ldi	r31, 0x5D	; 93
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <Stepper_Drive+0x2e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <Stepper_Drive+0x34>
 18a:	00 00       	nop
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
			{
				// cycle through the values stored in the Wave array
				for (uint8_t j = 0; j < 4; j++)
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	01 c0       	rjmp	.+2      	; 0x192 <Stepper_Drive+0x3c>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	78 f3       	brcs	.-34     	; 0x174 <Stepper_Drive+0x1e>
		case 'W':
			//number of steps for 1 revolution * # of revolutions
			steps = 512 * revolutions;
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	24 17       	cp	r18, r20
 19c:	35 07       	cpc	r19, r21
 19e:	c0 f3       	brcs	.-16     	; 0x190 <Stepper_Drive+0x3a>
 1a0:	08 95       	ret
		
		break;
		
		case 'F':
			//number of steps for 1 revolution * # of revolutions
			steps = 512 * revolutions;
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	56 2f       	mov	r21, r22
 1a6:	55 0f       	add	r21, r21
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <Stepper_Drive+0x7e>
			{
				// cycle through the values stored in the Full array
				for (uint8_t j = 0; j < 4; j++)
				{
					Stepper_Output = Full[j];
 1ae:	e8 2f       	mov	r30, r24
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	e8 5f       	subi	r30, 0xF8	; 248
 1b4:	fd 4f       	sbci	r31, 0xFD	; 253
 1b6:	90 81       	ld	r25, Z
 1b8:	92 b9       	out	0x02, r25	; 2
 1ba:	ef e7       	ldi	r30, 0x7F	; 127
 1bc:	fe e3       	ldi	r31, 0x3E	; 62
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <Stepper_Drive+0x68>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <Stepper_Drive+0x6e>
 1c4:	00 00       	nop
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
			{
				// cycle through the values stored in the Full array
				for (uint8_t j = 0; j < 4; j++)
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <Stepper_Drive+0x76>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	78 f3       	brcs	.-34     	; 0x1ae <Stepper_Drive+0x58>
		case 'F':
			//number of steps for 1 revolution * # of revolutions
			steps = 512 * revolutions;
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	24 17       	cp	r18, r20
 1d6:	35 07       	cpc	r19, r21
 1d8:	c0 f3       	brcs	.-16     	; 0x1ca <Stepper_Drive+0x74>
 1da:	08 95       	ret
		
		break;
		
		case 'H':
			//number of steps for 1 revolution * # of revolutions
			steps = 512 * revolutions;
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	56 2f       	mov	r21, r22
 1e0:	55 0f       	add	r21, r21
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	13 c0       	rjmp	.+38     	; 0x20e <Stepper_Drive+0xb8>
			{
				// cycle through the values stored in the Half array
				for (uint8_t j = 0; j < 8; j++)
				{
					Stepper_Output = Half[j];
 1e8:	e8 2f       	mov	r30, r24
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	90 81       	ld	r25, Z
 1f2:	92 b9       	out	0x02, r25	; 2
 1f4:	ef eb       	ldi	r30, 0xBF	; 191
 1f6:	fd e5       	ldi	r31, 0x5D	; 93
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <Stepper_Drive+0xa2>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <Stepper_Drive+0xa8>
 1fe:	00 00       	nop
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
			{
				// cycle through the values stored in the Half array
				for (uint8_t j = 0; j < 8; j++)
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	01 c0       	rjmp	.+2      	; 0x206 <Stepper_Drive+0xb0>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	78 f3       	brcs	.-34     	; 0x1e8 <Stepper_Drive+0x92>
		case 'H':
			//number of steps for 1 revolution * # of revolutions
			steps = 512 * revolutions;
			
			//for number of steps
			for(uint16_t i = 0; i < steps; i++)
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	24 17       	cp	r18, r20
 210:	35 07       	cpc	r19, r21
 212:	c0 f3       	brcs	.-16     	; 0x204 <Stepper_Drive+0xae>
 214:	08 95       	ret

00000216 <Stepper_Position>:
	uint32_t steps;	//initialize steps variable
	//number of steps for 1 revolution * # of revolutions
	steps = (512UL * Angle)/360;
	
	//for number of steps
	for(uint16_t i = 0; i < steps; i++)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	13 c0       	rjmp	.+38     	; 0x242 <Stepper_Position+0x2c>
	{
		// cycle through the values stored in the Wave array
		for (uint8_t j = 0; j < 4; j++)
		{
			Stepper_Output = Wave[j];
 21c:	e8 2f       	mov	r30, r24
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	e4 5f       	subi	r30, 0xF4	; 244
 222:	fd 4f       	sbci	r31, 0xFD	; 253
 224:	90 81       	ld	r25, Z
 226:	92 b9       	out	0x02, r25	; 2
 228:	ef eb       	ldi	r30, 0xBF	; 191
 22a:	fd e5       	ldi	r31, 0x5D	; 93
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <Stepper_Position+0x16>
 230:	00 c0       	rjmp	.+0      	; 0x232 <Stepper_Position+0x1c>
 232:	00 00       	nop
	
	//for number of steps
	for(uint16_t i = 0; i < steps; i++)
	{
		// cycle through the values stored in the Wave array
		for (uint8_t j = 0; j < 4; j++)
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	01 c0       	rjmp	.+2      	; 0x23a <Stepper_Position+0x24>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	78 f3       	brcs	.-34     	; 0x21c <Stepper_Position+0x6>
	uint32_t steps;	//initialize steps variable
	//number of steps for 1 revolution * # of revolutions
	steps = (512UL * Angle)/360;
	
	//for number of steps
	for(uint16_t i = 0; i < steps; i++)
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	20 38       	cpi	r18, 0x80	; 128
 244:	31 05       	cpc	r19, r1
 246:	c0 f3       	brcs	.-16     	; 0x238 <Stepper_Position+0x22>
		{
			Stepper_Output = Wave[j];
			_delay_ms(6);
		}
	}
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
