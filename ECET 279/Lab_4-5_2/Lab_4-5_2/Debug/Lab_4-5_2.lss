
Lab_4-5_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000e88  00000efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e88  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e6  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e5c  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d32  00000000  00000000  0000366a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  0000439c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000683  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036c  00000000  00000000  00004bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e8       	ldi	r30, 0x88	; 136
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	b9 c6       	rjmp	.+3442   	; 0xe84 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
void io_init(void);    // initialize all IO
void Valve_Control(char mode, uint8_t temp); // control valves for different times
uint8_t Set_Temp(void);  // Control temperature settings

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x6>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	io_init();  // initialize IO for Motor and IO Shield
 11e:	41 d0       	rcall	.+130    	; 0x1a2 <io_init>
	while (1)
	{	
		uint8_t checkStart = CHECK_BIT(Read_PB(), 0); // initialize checkStart
 120:	23 d2       	rcall	.+1094   	; 0x568 <Read_PB>
 122:	81 70       	andi	r24, 0x01	; 1
 124:	89 83       	std	Y+1, r24	; 0x01
		while (checkStart == 0)			// if start button has not been pressed
 126:	03 c0       	rjmp	.+6      	; 0x12e <main+0x1a>
		{
			// update checkStart until start button is pressed
			checkStart = CHECK_BIT(Read_PB(), 0);
 128:	1f d2       	rcall	.+1086   	; 0x568 <Read_PB>
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	89 81       	ldd	r24, Y+1	; 0x01
{
	io_init();  // initialize IO for Motor and IO Shield
	while (1)
	{	
		uint8_t checkStart = CHECK_BIT(Read_PB(), 0); // initialize checkStart
		while (checkStart == 0)			// if start button has not been pressed
 130:	88 23       	and	r24, r24
 132:	d1 f3       	breq	.-12     	; 0x128 <main+0x14>
		{
			// update checkStart until start button is pressed
			checkStart = CHECK_BIT(Read_PB(), 0);
		}
		
		uint8_t checkDoor = CHECK_BIT(Read_TS(), 3); // initialize checkDoor
 134:	2a d2       	rcall	.+1108   	; 0x58a <Read_TS>
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	8a 83       	std	Y+2, r24	; 0x02
		if(checkDoor == 0)
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	88 23       	and	r24, r24
 144:	69 f3       	breq	.-38     	; 0x120 <main+0xc>
			// exit if door is open, return to check start button
		}
		else
		{
			// use Set_Temp(); to determine the desired washing temperature
			uint8_t temp = Set_Temp();
 146:	ad d1       	rcall	.+858    	; 0x4a2 <Set_Temp>
 148:	8b 83       	std	Y+3, r24	; 0x03
			
			// FILL
			Valve_Control('F', temp);
 14a:	6b 81       	ldd	r22, Y+3	; 0x03
 14c:	86 e4       	ldi	r24, 0x46	; 70
 14e:	33 d0       	rcall	.+102    	; 0x1b6 <Valve_Control>
			
			// WASH
			Washing_Machine('A', 8);
 150:	68 e0       	ldi	r22, 0x08	; 8
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	7a d2       	rcall	.+1268   	; 0x64a <Washing_Machine>
			
			// DRAIN
			Valve_Control('D', temp);
 156:	6b 81       	ldd	r22, Y+3	; 0x03
 158:	84 e4       	ldi	r24, 0x44	; 68
 15a:	2d d0       	rcall	.+90     	; 0x1b6 <Valve_Control>
			
			// FILL
			Valve_Control('F', temp);
 15c:	6b 81       	ldd	r22, Y+3	; 0x03
 15e:	86 e4       	ldi	r24, 0x46	; 70
 160:	2a d0       	rcall	.+84     	; 0x1b6 <Valve_Control>
			
			// RINSE
			Washing_Machine('A', 6);
 162:	66 e0       	ldi	r22, 0x06	; 6
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	71 d2       	rcall	.+1250   	; 0x64a <Washing_Machine>
			
			
			// SPIN
			Valve_Control('S', temp);
 168:	6b 81       	ldd	r22, Y+3	; 0x03
 16a:	83 e5       	ldi	r24, 0x53	; 83
 16c:	24 d0       	rcall	.+72     	; 0x1b6 <Valve_Control>
			Washing_Machine('S', 8);
 16e:	68 e0       	ldi	r22, 0x08	; 8
 170:	83 e5       	ldi	r24, 0x53	; 83
 172:	6b d2       	rcall	.+1238   	; 0x64a <Washing_Machine>
			Set_LED(0x00);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	48 d2       	rcall	.+1168   	; 0x608 <Set_LED>
 178:	80 e1       	ldi	r24, 0x10	; 16
			
			// DONE LED ON
			Set_LED(DONE);	// turn on DONE LED
 17a:	46 d2       	rcall	.+1164   	; 0x608 <Set_LED>
 17c:	06 d2       	rcall	.+1036   	; 0x58a <Read_TS>
 17e:	86 95       	lsr	r24
			checkDoor = CHECK_BIT(Read_TS(), 3);  // update checkDoor variable
 180:	86 95       	lsr	r24
 182:	86 95       	lsr	r24
 184:	81 70       	andi	r24, 0x01	; 1
 186:	8a 83       	std	Y+2, r24	; 0x02
 188:	06 c0       	rjmp	.+12     	; 0x196 <main+0x82>
 18a:	ff d1       	rcall	.+1022   	; 0x58a <Read_TS>
			while (checkDoor == 1)	// while the door is still closed
 18c:	86 95       	lsr	r24
			{
				// update checkDoor until it is opened
				checkDoor = CHECK_BIT(Read_TS(), 3);	
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	81 70       	andi	r24, 0x01	; 1
 194:	8a 83       	std	Y+2, r24	; 0x02
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	b9 f3       	breq	.-18     	; 0x18a <main+0x76>
			Set_LED(0x00);
			
			// DONE LED ON
			Set_LED(DONE);	// turn on DONE LED
			checkDoor = CHECK_BIT(Read_TS(), 3);  // update checkDoor variable
			while (checkDoor == 1)	// while the door is still closed
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	34 d2       	rcall	.+1128   	; 0x608 <Set_LED>
 1a0:	bf cf       	rjmp	.-130    	; 0x120 <main+0xc>

000001a2 <io_init>:
			{
				// update checkDoor until it is opened
				checkDoor = CHECK_BIT(Read_TS(), 3);	
			}
			Set_LED(0x00); // turn off done LED
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
		}
	}
 1a8:	de b7       	in	r29, 0x3e	; 62
}

// A function in order to set up IO ports
void io_init(void)
{
	Stepper_init(); // initialize stepper motor IO
 1aa:	3e d2       	rcall	.+1148   	; 0x628 <Stepper_init>
	shield_io_init(); // initialize IO shield IO
 1ac:	b1 d1       	rcall	.+866    	; 0x510 <shield_io_init>
 1ae:	00 00       	nop
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <Valve_Control>:
 1b6:	cf 93       	push	r28

// A function to control the valve LEDs
void Valve_Control(char mode, uint8_t temp)
{
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	ac 97       	sbiw	r28, 0x2c	; 44
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	8b a7       	std	Y+43, r24	; 0x2b
 1cc:	6c a7       	std	Y+44, r22	; 0x2c
	switch (mode)
 1ce:	8b a5       	ldd	r24, Y+43	; 0x2b
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	86 34       	cpi	r24, 0x46	; 70
 1d6:	91 05       	cpc	r25, r1
 1d8:	49 f0       	breq	.+18     	; 0x1ec <Valve_Control+0x36>
 1da:	83 35       	cpi	r24, 0x53	; 83
 1dc:	91 05       	cpc	r25, r1
 1de:	09 f4       	brne	.+2      	; 0x1e2 <Valve_Control+0x2c>
 1e0:	e7 c0       	rjmp	.+462    	; 0x3b0 <Valve_Control+0x1fa>
 1e2:	84 34       	cpi	r24, 0x44	; 68
 1e4:	91 05       	cpc	r25, r1
 1e6:	09 f4       	brne	.+2      	; 0x1ea <Valve_Control+0x34>
 1e8:	72 c0       	rjmp	.+228    	; 0x2ce <Valve_Control+0x118>
			_delay_ms(1000); // delay 1 second
			// DRAIN valve turned off in code after spin is completed
			break;
		}
	}
}
 1ea:	51 c1       	rjmp	.+674    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
{
	switch (mode)
	{
		case 'F': // if set to fill
		{
			Set_LED(temp); // open desired valve
 1ec:	8c a5       	ldd	r24, Y+44	; 0x2c
 1ee:	0c d2       	rcall	.+1048   	; 0x608 <Set_LED>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	aa e7       	ldi	r26, 0x7A	; 122
 1f6:	b5 e4       	ldi	r27, 0x45	; 69
 1f8:	89 87       	std	Y+9, r24	; 0x09
 1fa:	9a 87       	std	Y+10, r25	; 0x0a
 1fc:	ab 87       	std	Y+11, r26	; 0x0b
 1fe:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4a e7       	ldi	r20, 0x7A	; 122
 206:	55 e4       	ldi	r21, 0x45	; 69
 208:	69 85       	ldd	r22, Y+9	; 0x09
 20a:	7a 85       	ldd	r23, Y+10	; 0x0a
 20c:	8b 85       	ldd	r24, Y+11	; 0x0b
 20e:	9c 85       	ldd	r25, Y+12	; 0x0c
 210:	ae d5       	rcall	.+2908   	; 0xd6e <__mulsf3>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	8d 87       	std	Y+13, r24	; 0x0d
 218:	9e 87       	std	Y+14, r25	; 0x0e
 21a:	af 87       	std	Y+15, r26	; 0x0f
 21c:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e8       	ldi	r20, 0x80	; 128
 224:	5f e3       	ldi	r21, 0x3F	; 63
 226:	6d 85       	ldd	r22, Y+13	; 0x0d
 228:	7e 85       	ldd	r23, Y+14	; 0x0e
 22a:	8f 85       	ldd	r24, Y+15	; 0x0f
 22c:	98 89       	ldd	r25, Y+16	; 0x10
 22e:	1e d5       	rcall	.+2620   	; 0xc6c <__cmpsf2>
 230:	88 23       	and	r24, r24
 232:	2c f4       	brge	.+10     	; 0x23e <Valve_Control+0x88>
		__ticks = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9a 8b       	std	Y+18, r25	; 0x12
 23a:	89 8b       	std	Y+17, r24	; 0x11
 23c:	3b c0       	rjmp	.+118    	; 0x2b4 <Valve_Control+0xfe>
	else if (__tmp > 65535)
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	3f ef       	ldi	r19, 0xFF	; 255
 242:	4f e7       	ldi	r20, 0x7F	; 127
 244:	57 e4       	ldi	r21, 0x47	; 71
 246:	6d 85       	ldd	r22, Y+13	; 0x0d
 248:	7e 85       	ldd	r23, Y+14	; 0x0e
 24a:	8f 85       	ldd	r24, Y+15	; 0x0f
 24c:	98 89       	ldd	r25, Y+16	; 0x10
 24e:	8b d5       	rcall	.+2838   	; 0xd66 <__gesf2>
 250:	18 16       	cp	r1, r24
 252:	3c f5       	brge	.+78     	; 0x2a2 <Valve_Control+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e2       	ldi	r20, 0x20	; 32
 25a:	51 e4       	ldi	r21, 0x41	; 65
 25c:	69 85       	ldd	r22, Y+9	; 0x09
 25e:	7a 85       	ldd	r23, Y+10	; 0x0a
 260:	8b 85       	ldd	r24, Y+11	; 0x0b
 262:	9c 85       	ldd	r25, Y+12	; 0x0c
 264:	84 d5       	rcall	.+2824   	; 0xd6e <__mulsf3>
 266:	dc 01       	movw	r26, r24
 268:	cb 01       	movw	r24, r22
 26a:	bc 01       	movw	r22, r24
 26c:	cd 01       	movw	r24, r26
 26e:	02 d5       	rcall	.+2564   	; 0xc74 <__fixunssfsi>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	9a 8b       	std	Y+18, r25	; 0x12
 276:	89 8b       	std	Y+17, r24	; 0x11
 278:	0f c0       	rjmp	.+30     	; 0x298 <Valve_Control+0xe2>
 27a:	80 e9       	ldi	r24, 0x90	; 144
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	9c 8b       	std	Y+20, r25	; 0x14
 280:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 282:	8b 89       	ldd	r24, Y+19	; 0x13
 284:	9c 89       	ldd	r25, Y+20	; 0x14
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Valve_Control+0xd0>
 28a:	9c 8b       	std	Y+20, r25	; 0x14
 28c:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	89 89       	ldd	r24, Y+17	; 0x11
 290:	9a 89       	ldd	r25, Y+18	; 0x12
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	9a 8b       	std	Y+18, r25	; 0x12
 296:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 298:	89 89       	ldd	r24, Y+17	; 0x11
 29a:	9a 89       	ldd	r25, Y+18	; 0x12
 29c:	89 2b       	or	r24, r25
 29e:	69 f7       	brne	.-38     	; 0x27a <Valve_Control+0xc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a0:	13 c0       	rjmp	.+38     	; 0x2c8 <Valve_Control+0x112>
 2a2:	6d 85       	ldd	r22, Y+13	; 0x0d
 2a4:	7e 85       	ldd	r23, Y+14	; 0x0e
 2a6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2a8:	98 89       	ldd	r25, Y+16	; 0x10
 2aa:	e4 d4       	rcall	.+2504   	; 0xc74 <__fixunssfsi>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	9a 8b       	std	Y+18, r25	; 0x12
 2b2:	89 8b       	std	Y+17, r24	; 0x11
 2b4:	89 89       	ldd	r24, Y+17	; 0x11
 2b6:	9a 89       	ldd	r25, Y+18	; 0x12
 2b8:	9e 8b       	std	Y+22, r25	; 0x16
 2ba:	8d 8b       	std	Y+21, r24	; 0x15
 2bc:	8d 89       	ldd	r24, Y+21	; 0x15
 2be:	9e 89       	ldd	r25, Y+22	; 0x16
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Valve_Control+0x10a>
			_delay_ms(4000); // delay 4 seconds
			Set_LED(0x00); // turn off all valves
 2c4:	9e 8b       	std	Y+22, r25	; 0x16
 2c6:	8d 8b       	std	Y+21, r24	; 0x15
 2c8:	80 e0       	ldi	r24, 0x00	; 0
			break;
 2ca:	9e d1       	rcall	.+828    	; 0x608 <Set_LED>
		}
		
		case 'D': // if set to drain
		{
			Set_LED(DRAIN); // open drain valve
 2cc:	e0 c0       	rjmp	.+448    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	9b d1       	rcall	.+822    	; 0x608 <Set_LED>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	aa e7       	ldi	r26, 0x7A	; 122
 2d8:	b5 e4       	ldi	r27, 0x45	; 69
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	ab 83       	std	Y+3, r26	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2e0:	bc 83       	std	Y+4, r27	; 0x04
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	4a e7       	ldi	r20, 0x7A	; 122
 2e8:	55 e4       	ldi	r21, 0x45	; 69
 2ea:	69 81       	ldd	r22, Y+1	; 0x01
 2ec:	7a 81       	ldd	r23, Y+2	; 0x02
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	9c 81       	ldd	r25, Y+4	; 0x04
 2f2:	3d d5       	rcall	.+2682   	; 0xd6e <__mulsf3>
 2f4:	dc 01       	movw	r26, r24
 2f6:	cb 01       	movw	r24, r22
 2f8:	8f 8b       	std	Y+23, r24	; 0x17
 2fa:	98 8f       	std	Y+24, r25	; 0x18
 2fc:	a9 8f       	std	Y+25, r26	; 0x19
	if (__tmp < 1.0)
 2fe:	ba 8f       	std	Y+26, r27	; 0x1a
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e8       	ldi	r20, 0x80	; 128
 306:	5f e3       	ldi	r21, 0x3F	; 63
 308:	6f 89       	ldd	r22, Y+23	; 0x17
 30a:	78 8d       	ldd	r23, Y+24	; 0x18
 30c:	89 8d       	ldd	r24, Y+25	; 0x19
 30e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 310:	ad d4       	rcall	.+2394   	; 0xc6c <__cmpsf2>
 312:	88 23       	and	r24, r24
 314:	2c f4       	brge	.+10     	; 0x320 <Valve_Control+0x16a>
		__ticks = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	9c 8f       	std	Y+28, r25	; 0x1c
 31c:	8b 8f       	std	Y+27, r24	; 0x1b
	else if (__tmp > 65535)
 31e:	3b c0       	rjmp	.+118    	; 0x396 <Valve_Control+0x1e0>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	3f ef       	ldi	r19, 0xFF	; 255
 324:	4f e7       	ldi	r20, 0x7F	; 127
 326:	57 e4       	ldi	r21, 0x47	; 71
 328:	6f 89       	ldd	r22, Y+23	; 0x17
 32a:	78 8d       	ldd	r23, Y+24	; 0x18
 32c:	89 8d       	ldd	r24, Y+25	; 0x19
 32e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 330:	1a d5       	rcall	.+2612   	; 0xd66 <__gesf2>
 332:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 334:	3c f5       	brge	.+78     	; 0x384 <Valve_Control+0x1ce>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e2       	ldi	r20, 0x20	; 32
 33c:	51 e4       	ldi	r21, 0x41	; 65
 33e:	69 81       	ldd	r22, Y+1	; 0x01
 340:	7a 81       	ldd	r23, Y+2	; 0x02
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	9c 81       	ldd	r25, Y+4	; 0x04
 346:	13 d5       	rcall	.+2598   	; 0xd6e <__mulsf3>
 348:	dc 01       	movw	r26, r24
 34a:	cb 01       	movw	r24, r22
 34c:	bc 01       	movw	r22, r24
 34e:	cd 01       	movw	r24, r26
 350:	91 d4       	rcall	.+2338   	; 0xc74 <__fixunssfsi>
 352:	dc 01       	movw	r26, r24
 354:	cb 01       	movw	r24, r22
 356:	9c 8f       	std	Y+28, r25	; 0x1c
 358:	8b 8f       	std	Y+27, r24	; 0x1b
 35a:	0f c0       	rjmp	.+30     	; 0x37a <Valve_Control+0x1c4>
 35c:	80 e9       	ldi	r24, 0x90	; 144
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	9e 8f       	std	Y+30, r25	; 0x1e
 362:	8d 8f       	std	Y+29, r24	; 0x1d
 364:	8d 8d       	ldd	r24, Y+29	; 0x1d
 366:	9e 8d       	ldd	r25, Y+30	; 0x1e
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <Valve_Control+0x1b2>
 36c:	9e 8f       	std	Y+30, r25	; 0x1e
 36e:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 370:	8b 8d       	ldd	r24, Y+27	; 0x1b
 372:	9c 8d       	ldd	r25, Y+28	; 0x1c
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	9c 8f       	std	Y+28, r25	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 378:	8b 8f       	std	Y+27, r24	; 0x1b
 37a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 37c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 37e:	89 2b       	or	r24, r25
 380:	69 f7       	brne	.-38     	; 0x35c <Valve_Control+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 382:	13 c0       	rjmp	.+38     	; 0x3aa <Valve_Control+0x1f4>
 384:	6f 89       	ldd	r22, Y+23	; 0x17
 386:	78 8d       	ldd	r23, Y+24	; 0x18
 388:	89 8d       	ldd	r24, Y+25	; 0x19
 38a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 38c:	73 d4       	rcall	.+2278   	; 0xc74 <__fixunssfsi>
 38e:	dc 01       	movw	r26, r24
 390:	cb 01       	movw	r24, r22
 392:	9c 8f       	std	Y+28, r25	; 0x1c
 394:	8b 8f       	std	Y+27, r24	; 0x1b
 396:	8b 8d       	ldd	r24, Y+27	; 0x1b
 398:	9c 8d       	ldd	r25, Y+28	; 0x1c
 39a:	98 a3       	std	Y+32, r25	; 0x20
 39c:	8f 8f       	std	Y+31, r24	; 0x1f
 39e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 3a0:	98 a1       	ldd	r25, Y+32	; 0x20
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <Valve_Control+0x1ec>
			_delay_ms(4000); // delay 4 seconds
			Set_LED(0x00); // turn off all valves
 3a6:	98 a3       	std	Y+32, r25	; 0x20
 3a8:	8f 8f       	std	Y+31, r24	; 0x1f
 3aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
 3ac:	2d d1       	rcall	.+602    	; 0x608 <Set_LED>
		}
		
		case 'S': // if set to spin cycle
		{
			Set_LED(DRAIN); // open drain valve
 3ae:	6f c0       	rjmp	.+222    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	2a d1       	rcall	.+596    	; 0x608 <Set_LED>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	aa e7       	ldi	r26, 0x7A	; 122
 3ba:	b4 e4       	ldi	r27, 0x44	; 68
 3bc:	8d 83       	std	Y+5, r24	; 0x05
 3be:	9e 83       	std	Y+6, r25	; 0x06
 3c0:	af 83       	std	Y+7, r26	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3c2:	b8 87       	std	Y+8, r27	; 0x08
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	4a e7       	ldi	r20, 0x7A	; 122
 3ca:	55 e4       	ldi	r21, 0x45	; 69
 3cc:	6d 81       	ldd	r22, Y+5	; 0x05
 3ce:	7e 81       	ldd	r23, Y+6	; 0x06
 3d0:	8f 81       	ldd	r24, Y+7	; 0x07
 3d2:	98 85       	ldd	r25, Y+8	; 0x08
 3d4:	cc d4       	rcall	.+2456   	; 0xd6e <__mulsf3>
 3d6:	dc 01       	movw	r26, r24
 3d8:	cb 01       	movw	r24, r22
 3da:	89 a3       	std	Y+33, r24	; 0x21
 3dc:	9a a3       	std	Y+34, r25	; 0x22
 3de:	ab a3       	std	Y+35, r26	; 0x23
	if (__tmp < 1.0)
 3e0:	bc a3       	std	Y+36, r27	; 0x24
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	40 e8       	ldi	r20, 0x80	; 128
 3e8:	5f e3       	ldi	r21, 0x3F	; 63
 3ea:	69 a1       	ldd	r22, Y+33	; 0x21
 3ec:	7a a1       	ldd	r23, Y+34	; 0x22
 3ee:	8b a1       	ldd	r24, Y+35	; 0x23
 3f0:	9c a1       	ldd	r25, Y+36	; 0x24
 3f2:	3c d4       	rcall	.+2168   	; 0xc6c <__cmpsf2>
 3f4:	88 23       	and	r24, r24
		__ticks = 1;
 3f6:	2c f4       	brge	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	9e a3       	std	Y+38, r25	; 0x26
 3fe:	8d a3       	std	Y+37, r24	; 0x25
	else if (__tmp > 65535)
 400:	3b c0       	rjmp	.+118    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	3f ef       	ldi	r19, 0xFF	; 255
 406:	4f e7       	ldi	r20, 0x7F	; 127
 408:	57 e4       	ldi	r21, 0x47	; 71
 40a:	69 a1       	ldd	r22, Y+33	; 0x21
 40c:	7a a1       	ldd	r23, Y+34	; 0x22
 40e:	8b a1       	ldd	r24, Y+35	; 0x23
 410:	9c a1       	ldd	r25, Y+36	; 0x24
 412:	a9 d4       	rcall	.+2386   	; 0xd66 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 414:	18 16       	cp	r1, r24
 416:	3c f5       	brge	.+78     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	40 e2       	ldi	r20, 0x20	; 32
 41e:	51 e4       	ldi	r21, 0x41	; 65
 420:	6d 81       	ldd	r22, Y+5	; 0x05
 422:	7e 81       	ldd	r23, Y+6	; 0x06
 424:	8f 81       	ldd	r24, Y+7	; 0x07
 426:	98 85       	ldd	r25, Y+8	; 0x08
 428:	a2 d4       	rcall	.+2372   	; 0xd6e <__mulsf3>
 42a:	dc 01       	movw	r26, r24
 42c:	cb 01       	movw	r24, r22
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	20 d4       	rcall	.+2112   	; 0xc74 <__fixunssfsi>
 434:	dc 01       	movw	r26, r24
 436:	cb 01       	movw	r24, r22
 438:	9e a3       	std	Y+38, r25	; 0x26
 43a:	8d a3       	std	Y+37, r24	; 0x25
 43c:	0f c0       	rjmp	.+30     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 43e:	80 e9       	ldi	r24, 0x90	; 144
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	98 a7       	std	Y+40, r25	; 0x28
 444:	8f a3       	std	Y+39, r24	; 0x27
 446:	8f a1       	ldd	r24, Y+39	; 0x27
 448:	98 a5       	ldd	r25, Y+40	; 0x28
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44e:	98 a7       	std	Y+40, r25	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 450:	8f a3       	std	Y+39, r24	; 0x27
 452:	8d a1       	ldd	r24, Y+37	; 0x25
 454:	9e a1       	ldd	r25, Y+38	; 0x26
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45a:	8d a3       	std	Y+37, r24	; 0x25
 45c:	8d a1       	ldd	r24, Y+37	; 0x25
 45e:	9e a1       	ldd	r25, Y+38	; 0x26
 460:	89 2b       	or	r24, r25
			_delay_ms(1000); // delay 1 second
			// DRAIN valve turned off in code after spin is completed
			break;
 462:	69 f7       	brne	.-38     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 464:	13 c0       	rjmp	.+38     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 466:	69 a1       	ldd	r22, Y+33	; 0x21
 468:	7a a1       	ldd	r23, Y+34	; 0x22
 46a:	8b a1       	ldd	r24, Y+35	; 0x23
 46c:	9c a1       	ldd	r25, Y+36	; 0x24
 46e:	02 d4       	rcall	.+2052   	; 0xc74 <__fixunssfsi>
 470:	dc 01       	movw	r26, r24
 472:	cb 01       	movw	r24, r22
 474:	9e a3       	std	Y+38, r25	; 0x26
 476:	8d a3       	std	Y+37, r24	; 0x25
 478:	8d a1       	ldd	r24, Y+37	; 0x25
 47a:	9e a1       	ldd	r25, Y+38	; 0x26
 47c:	9a a7       	std	Y+42, r25	; 0x2a
 47e:	89 a7       	std	Y+41, r24	; 0x29
 480:	89 a5       	ldd	r24, Y+41	; 0x29
 482:	9a a5       	ldd	r25, Y+42	; 0x2a
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 488:	9a a7       	std	Y+42, r25	; 0x2a
 48a:	89 a7       	std	Y+41, r24	; 0x29
 48c:	00 00       	nop
		}
	}
}
 48e:	00 00       	nop
 490:	ac 96       	adiw	r28, 0x2c	; 44
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <Set_Temp>:

// A function used to determine the desired temperature setting
uint8_t Set_Temp(void)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	1f 92       	push	r1
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	// initialize input variable as ONLY the temperature bits from the toggle switches
	uint8_t input = Read_TS() & 0x07;
 4ac:	6e d0       	rcall	.+220    	; 0x58a <Read_TS>
 4ae:	87 70       	andi	r24, 0x07	; 7
 4b0:	89 83       	std	Y+1, r24	; 0x01
	switch (input)
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	91 05       	cpc	r25, r1
 4bc:	39 f0       	breq	.+14     	; 0x4cc <Set_Temp+0x2a>
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	91 05       	cpc	r25, r1
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <Set_Temp+0x2e>
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	31 f4       	brne	.+12     	; 0x4d4 <Set_Temp+0x32>
	{
		// if hot is selected, return hot
		case HOTTS:
		{
			return HOT;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	1e c0       	rjmp	.+60     	; 0x508 <Set_Temp+0x66>
		}
		
		// if warm is selected, return warm
		case WARMTS:
		{
			return WARM;
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	1c c0       	rjmp	.+56     	; 0x508 <Set_Temp+0x66>
		}
		
		// if cold is selected, return cold
		case COLDTS:
		{
			return COLD;
 4d0:	82 e0       	ldi	r24, 0x02	; 2
		}
		
		// if input is invalid
		default:
		{
			input = Read_TS() & 0x07;
 4d2:	1a c0       	rjmp	.+52     	; 0x508 <Set_Temp+0x66>
 4d4:	5a d0       	rcall	.+180    	; 0x58a <Read_TS>
 4d6:	87 70       	andi	r24, 0x07	; 7
			// while the input is invalid, keep checking the input
			while(input != HOTTS || input != COLDTS || input != WARMTS)
 4d8:	89 83       	std	Y+1, r24	; 0x01
			{
				// continuously update the input as ONLY the temperature bits
				input = Read_TS() & 0x07;
 4da:	0c c0       	rjmp	.+24     	; 0x4f4 <Set_Temp+0x52>
 4dc:	56 d0       	rcall	.+172    	; 0x58a <Read_TS>
 4de:	87 70       	andi	r24, 0x07	; 7
 4e0:	89 83       	std	Y+1, r24	; 0x01
				
				// if input is correct (added for redundancy and bugs with while())
				if(input == HOTTS || input == COLDTS || input == WARMTS)
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	79 f0       	breq	.+30     	; 0x506 <Set_Temp+0x64>
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	61 f0       	breq	.+24     	; 0x506 <Set_Temp+0x64>
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	49 f0       	breq	.+18     	; 0x506 <Set_Temp+0x64>
		// if input is invalid
		default:
		{
			input = Read_TS() & 0x07;
			// while the input is invalid, keep checking the input
			while(input != HOTTS || input != COLDTS || input != WARMTS)
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	89 f7       	brne	.-30     	; 0x4dc <Set_Temp+0x3a>
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	84 30       	cpi	r24, 0x04	; 4
 4fe:	71 f7       	brne	.-36     	; 0x4dc <Set_Temp+0x3a>
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	82 30       	cpi	r24, 0x02	; 2
 504:	59 f7       	brne	.-42     	; 0x4dc <Set_Temp+0x3a>
					break; // break out of while loop
				}
			}
			
			// once the input is valid, return it
			return input;
 506:	89 81       	ldd	r24, Y+1	; 0x01
			break;
		}
	}
 508:	0f 90       	pop	r0
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <shield_io_init>:
 *		  Toggle Switches		PORTE.3-5, PORTG.5
 */ 
#include "shieldIO.h"

void shield_io_init(void)
{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	// PushButton Initializations
	DDRB = 0x00;
 518:	84 e2       	ldi	r24, 0x24	; 36
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	10 82       	st	Z, r1
	PORTB = 0xFF;
 520:	85 e2       	ldi	r24, 0x25	; 37
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	2f ef       	ldi	r18, 0xFF	; 255
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
	
	// TS Initializations
	DDRE = 0x00;
 52a:	8d e2       	ldi	r24, 0x2D	; 45
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	10 82       	st	Z, r1
	PORTE = 0xFF;
 532:	8e e2       	ldi	r24, 0x2E	; 46
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18
	DDRG = 0x00;
 53c:	83 e3       	ldi	r24, 0x33	; 51
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc 01       	movw	r30, r24
 542:	10 82       	st	Z, r1
	PORTG = 0xFF;
 544:	84 e3       	ldi	r24, 0x34	; 52
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2f ef       	ldi	r18, 0xFF	; 255
 54a:	fc 01       	movw	r30, r24
 54c:	20 83       	st	Z, r18
	
	
	// LED Initializations
	DDRA = 0xFF;
 54e:	81 e2       	ldi	r24, 0x21	; 33
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	fc 01       	movw	r30, r24
 556:	20 83       	st	Z, r18
	PORTA = 0x00;
 558:	82 e2       	ldi	r24, 0x22	; 34
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	fc 01       	movw	r30, r24
 55e:	10 82       	st	Z, r1
}
 560:	00 00       	nop
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <Read_PB>:

uint8_t Read_PB(void)
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	1f 92       	push	r1
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
	// read in inputs from pushbuttons to variable "data"
	uint8_t data = ~(PINB & ( (1<<PB3) | (1<<PB2) | (1<<PB1) | (1<<PB0)));
 572:	83 e2       	ldi	r24, 0x23	; 35
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	fc 01       	movw	r30, r24
 578:	80 81       	ld	r24, Z
 57a:	8f 70       	andi	r24, 0x0F	; 15
 57c:	80 95       	com	r24
 57e:	89 83       	std	Y+1, r24	; 0x01
	return data;
 580:	89 81       	ldd	r24, Y+1	; 0x01
}
 582:	0f 90       	pop	r0
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <Read_TS>:

uint8_t Read_TS(void)
{
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	1f 92       	push	r1
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
	// read in PINE.3 to variable "data". Shift "data" left one bit
	uint8_t data = CHECK_BITIO(PINE, 3);
 594:	8c e2       	ldi	r24, 0x2C	; 44
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	fc 01       	movw	r30, r24
 59a:	80 81       	ld	r24, Z
 59c:	86 95       	lsr	r24
 59e:	86 95       	lsr	r24
 5a0:	86 95       	lsr	r24
 5a2:	81 70       	andi	r24, 0x01	; 1
 5a4:	89 83       	std	Y+1, r24	; 0x01
	data = data << 1;
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	88 0f       	add	r24, r24
 5aa:	89 83       	std	Y+1, r24	; 0x01
	
	// read in PING.5 to bit 0 of "data". Shift "data" left one bit
	data = data | CHECK_BITIO(PING, 5);
 5ac:	82 e3       	ldi	r24, 0x32	; 50
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	82 95       	swap	r24
 5b6:	86 95       	lsr	r24
 5b8:	87 70       	andi	r24, 0x07	; 7
 5ba:	98 2f       	mov	r25, r24
 5bc:	91 70       	andi	r25, 0x01	; 1
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	89 2b       	or	r24, r25
 5c2:	89 83       	std	Y+1, r24	; 0x01
	data = data << 1;
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	88 0f       	add	r24, r24
 5c8:	89 83       	std	Y+1, r24	; 0x01
	
	// read in PINE.5 to bit 0 of "data". Shift "data" left one bit
	data = data | CHECK_BITIO(PINE, 5);
 5ca:	8c e2       	ldi	r24, 0x2C	; 44
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	fc 01       	movw	r30, r24
 5d0:	80 81       	ld	r24, Z
 5d2:	82 95       	swap	r24
 5d4:	86 95       	lsr	r24
 5d6:	87 70       	andi	r24, 0x07	; 7
 5d8:	98 2f       	mov	r25, r24
 5da:	91 70       	andi	r25, 0x01	; 1
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	89 2b       	or	r24, r25
 5e0:	89 83       	std	Y+1, r24	; 0x01
	data = data << 1;
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	88 0f       	add	r24, r24
 5e6:	89 83       	std	Y+1, r24	; 0x01
	
	// read in PINE.4 to bit 0 of "data". Return "data"
	data = data | CHECK_BITIO(PINE, 4);
 5e8:	8c e2       	ldi	r24, 0x2C	; 44
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	fc 01       	movw	r30, r24
 5ee:	80 81       	ld	r24, Z
 5f0:	82 95       	swap	r24
 5f2:	8f 70       	andi	r24, 0x0F	; 15
 5f4:	98 2f       	mov	r25, r24
 5f6:	91 70       	andi	r25, 0x01	; 1
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	89 2b       	or	r24, r25
 5fc:	89 83       	std	Y+1, r24	; 0x01
	return data;
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <Set_LED>:

void Set_LED(uint8_t LED)
{
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	1f 92       	push	r1
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	89 83       	std	Y+1, r24	; 0x01
	// output LED input to PORTA
	PORTA = LED;
 614:	82 e2       	ldi	r24, 0x22	; 34
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	29 81       	ldd	r18, Y+1	; 0x01
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
}
 61e:	00 00       	nop
 620:	0f 90       	pop	r0
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <Stepper_init>:
			Stepper_Output = Wave[j];
			// delay by 600 ms
			//_delay_ms(600);
		}
	}
}
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	87 e2       	ldi	r24, 0x27	; 39
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
 63a:	88 e2       	ldi	r24, 0x28	; 40
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	fc 01       	movw	r30, r24
 640:	10 82       	st	Z, r1
 642:	00 00       	nop
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <Washing_Machine>:

void Washing_Machine(char mode, uint8_t cycleTime_s)
{
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	ce 54       	subi	r28, 0x4E	; 78
 658:	d1 09       	sbc	r29, r1
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	9e 01       	movw	r18, r28
 666:	23 5b       	subi	r18, 0xB3	; 179
 668:	3f 4f       	sbci	r19, 0xFF	; 255
 66a:	f9 01       	movw	r30, r18
 66c:	80 83       	st	Z, r24
 66e:	ce 01       	movw	r24, r28
 670:	82 5b       	subi	r24, 0xB2	; 178
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	fc 01       	movw	r30, r24
 676:	60 83       	st	Z, r22
	switch (mode)
 678:	ce 01       	movw	r24, r28
 67a:	83 5b       	subi	r24, 0xB3	; 179
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	fc 01       	movw	r30, r24
 680:	80 81       	ld	r24, Z
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	81 34       	cpi	r24, 0x41	; 65
 688:	91 05       	cpc	r25, r1
 68a:	29 f0       	breq	.+10     	; 0x696 <Washing_Machine+0x4c>
 68c:	83 35       	cpi	r24, 0x53	; 83
 68e:	91 05       	cpc	r25, r1
 690:	09 f4       	brne	.+2      	; 0x694 <Washing_Machine+0x4a>
 692:	f1 c1       	rjmp	.+994    	; 0xa76 <Washing_Machine+0x42c>
				}
			}
			break;
		}
	}
 694:	de c2       	rjmp	.+1468   	; 0xc52 <Washing_Machine+0x608>
		case 'A':
		{
			// start for loop, cycleTime_s/2 as there is 2 seconds for each CW/CCW

			
			for (uint16_t i = cycleTime_s/4; i > 0; i--)
 696:	ce 01       	movw	r24, r28
 698:	82 5b       	subi	r24, 0xB2	; 178
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	fc 01       	movw	r30, r24
 69e:	80 81       	ld	r24, Z
 6a0:	86 95       	lsr	r24
 6a2:	86 95       	lsr	r24
 6a4:	88 2f       	mov	r24, r24
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	9a 83       	std	Y+2, r25	; 0x02
 6aa:	89 83       	std	Y+1, r24	; 0x01
 6ac:	25 c1       	rjmp	.+586    	; 0x8f8 <Washing_Machine+0x2ae>
			{
				// for 21 total steps (42 steps * 8 array values * 6 ms = 1 s)
				for (uint16_t k = 0; k < 42; k++)
 6ae:	1c 82       	std	Y+4, r1	; 0x04
 6b0:	1b 82       	std	Y+3, r1	; 0x03
 6b2:	88 c0       	rjmp	.+272    	; 0x7c4 <Washing_Machine+0x17a>
				{
					// cycle through Half[] array
					for (uint16_t j = 0; j < 8; j++)
 6b4:	1e 82       	std	Y+6, r1	; 0x06
 6b6:	1d 82       	std	Y+5, r1	; 0x05
 6b8:	7b c0       	rjmp	.+246    	; 0x7b0 <Washing_Machine+0x166>
					{
						// output each part of the Half[] array for every step
						Stepper_Output = Half[j];
 6ba:	88 e2       	ldi	r24, 0x28	; 40
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	2d 81       	ldd	r18, Y+5	; 0x05
 6c0:	3e 81       	ldd	r19, Y+6	; 0x06
 6c2:	2c 5f       	subi	r18, 0xFC	; 252
 6c4:	3d 4f       	sbci	r19, 0xFD	; 253
 6c6:	f9 01       	movw	r30, r18
 6c8:	20 81       	ld	r18, Z
 6ca:	fc 01       	movw	r30, r24
 6cc:	20 83       	st	Z, r18
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a0 ec       	ldi	r26, 0xC0	; 192
 6d4:	b0 e4       	ldi	r27, 0x40	; 64
 6d6:	89 a3       	std	Y+33, r24	; 0x21
 6d8:	9a a3       	std	Y+34, r25	; 0x22
 6da:	ab a3       	std	Y+35, r26	; 0x23
 6dc:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	4a e7       	ldi	r20, 0x7A	; 122
 6e4:	55 e4       	ldi	r21, 0x45	; 69
 6e6:	69 a1       	ldd	r22, Y+33	; 0x21
 6e8:	7a a1       	ldd	r23, Y+34	; 0x22
 6ea:	8b a1       	ldd	r24, Y+35	; 0x23
 6ec:	9c a1       	ldd	r25, Y+36	; 0x24
 6ee:	3f d3       	rcall	.+1662   	; 0xd6e <__mulsf3>
 6f0:	dc 01       	movw	r26, r24
 6f2:	cb 01       	movw	r24, r22
 6f4:	8d a3       	std	Y+37, r24	; 0x25
 6f6:	9e a3       	std	Y+38, r25	; 0x26
 6f8:	af a3       	std	Y+39, r26	; 0x27
 6fa:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	40 e8       	ldi	r20, 0x80	; 128
 702:	5f e3       	ldi	r21, 0x3F	; 63
 704:	6d a1       	ldd	r22, Y+37	; 0x25
 706:	7e a1       	ldd	r23, Y+38	; 0x26
 708:	8f a1       	ldd	r24, Y+39	; 0x27
 70a:	98 a5       	ldd	r25, Y+40	; 0x28
 70c:	af d2       	rcall	.+1374   	; 0xc6c <__cmpsf2>
 70e:	88 23       	and	r24, r24
 710:	2c f4       	brge	.+10     	; 0x71c <Washing_Machine+0xd2>
		__ticks = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	9a a7       	std	Y+42, r25	; 0x2a
 718:	89 a7       	std	Y+41, r24	; 0x29
 71a:	3b c0       	rjmp	.+118    	; 0x792 <Washing_Machine+0x148>
	else if (__tmp > 65535)
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	3f ef       	ldi	r19, 0xFF	; 255
 720:	4f e7       	ldi	r20, 0x7F	; 127
 722:	57 e4       	ldi	r21, 0x47	; 71
 724:	6d a1       	ldd	r22, Y+37	; 0x25
 726:	7e a1       	ldd	r23, Y+38	; 0x26
 728:	8f a1       	ldd	r24, Y+39	; 0x27
 72a:	98 a5       	ldd	r25, Y+40	; 0x28
 72c:	1c d3       	rcall	.+1592   	; 0xd66 <__gesf2>
 72e:	18 16       	cp	r1, r24
 730:	3c f5       	brge	.+78     	; 0x780 <Washing_Machine+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	40 e2       	ldi	r20, 0x20	; 32
 738:	51 e4       	ldi	r21, 0x41	; 65
 73a:	69 a1       	ldd	r22, Y+33	; 0x21
 73c:	7a a1       	ldd	r23, Y+34	; 0x22
 73e:	8b a1       	ldd	r24, Y+35	; 0x23
 740:	9c a1       	ldd	r25, Y+36	; 0x24
 742:	15 d3       	rcall	.+1578   	; 0xd6e <__mulsf3>
 744:	dc 01       	movw	r26, r24
 746:	cb 01       	movw	r24, r22
 748:	bc 01       	movw	r22, r24
 74a:	cd 01       	movw	r24, r26
 74c:	93 d2       	rcall	.+1318   	; 0xc74 <__fixunssfsi>
 74e:	dc 01       	movw	r26, r24
 750:	cb 01       	movw	r24, r22
 752:	9a a7       	std	Y+42, r25	; 0x2a
 754:	89 a7       	std	Y+41, r24	; 0x29
 756:	0f c0       	rjmp	.+30     	; 0x776 <Washing_Machine+0x12c>
 758:	80 e9       	ldi	r24, 0x90	; 144
 75a:	91 e0       	ldi	r25, 0x01	; 1
 75c:	9c a7       	std	Y+44, r25	; 0x2c
 75e:	8b a7       	std	Y+43, r24	; 0x2b
 760:	8b a5       	ldd	r24, Y+43	; 0x2b
 762:	9c a5       	ldd	r25, Y+44	; 0x2c
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <Washing_Machine+0x11a>
 768:	9c a7       	std	Y+44, r25	; 0x2c
 76a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 76c:	89 a5       	ldd	r24, Y+41	; 0x29
 76e:	9a a5       	ldd	r25, Y+42	; 0x2a
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	9a a7       	std	Y+42, r25	; 0x2a
 774:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 776:	89 a5       	ldd	r24, Y+41	; 0x29
 778:	9a a5       	ldd	r25, Y+42	; 0x2a
 77a:	89 2b       	or	r24, r25
 77c:	69 f7       	brne	.-38     	; 0x758 <Washing_Machine+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 77e:	13 c0       	rjmp	.+38     	; 0x7a6 <Washing_Machine+0x15c>
 780:	6d a1       	ldd	r22, Y+37	; 0x25
 782:	7e a1       	ldd	r23, Y+38	; 0x26
 784:	8f a1       	ldd	r24, Y+39	; 0x27
 786:	98 a5       	ldd	r25, Y+40	; 0x28
 788:	75 d2       	rcall	.+1258   	; 0xc74 <__fixunssfsi>
 78a:	dc 01       	movw	r26, r24
 78c:	cb 01       	movw	r24, r22
 78e:	9a a7       	std	Y+42, r25	; 0x2a
 790:	89 a7       	std	Y+41, r24	; 0x29
 792:	89 a5       	ldd	r24, Y+41	; 0x29
 794:	9a a5       	ldd	r25, Y+42	; 0x2a
 796:	9e a7       	std	Y+46, r25	; 0x2e
 798:	8d a7       	std	Y+45, r24	; 0x2d
 79a:	8d a5       	ldd	r24, Y+45	; 0x2d
 79c:	9e a5       	ldd	r25, Y+46	; 0x2e
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <Washing_Machine+0x154>
 7a2:	9e a7       	std	Y+46, r25	; 0x2e
 7a4:	8d a7       	std	Y+45, r24	; 0x2d
			{
				// for 21 total steps (42 steps * 8 array values * 6 ms = 1 s)
				for (uint16_t k = 0; k < 42; k++)
				{
					// cycle through Half[] array
					for (uint16_t j = 0; j < 8; j++)
 7a6:	8d 81       	ldd	r24, Y+5	; 0x05
 7a8:	9e 81       	ldd	r25, Y+6	; 0x06
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	9e 83       	std	Y+6, r25	; 0x06
 7ae:	8d 83       	std	Y+5, r24	; 0x05
 7b0:	8d 81       	ldd	r24, Y+5	; 0x05
 7b2:	9e 81       	ldd	r25, Y+6	; 0x06
 7b4:	08 97       	sbiw	r24, 0x08	; 8
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <Washing_Machine+0x170>
 7b8:	80 cf       	rjmp	.-256    	; 0x6ba <Washing_Machine+0x70>

			
			for (uint16_t i = cycleTime_s/4; i > 0; i--)
			{
				// for 21 total steps (42 steps * 8 array values * 6 ms = 1 s)
				for (uint16_t k = 0; k < 42; k++)
 7ba:	8b 81       	ldd	r24, Y+3	; 0x03
 7bc:	9c 81       	ldd	r25, Y+4	; 0x04
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	9c 83       	std	Y+4, r25	; 0x04
 7c2:	8b 83       	std	Y+3, r24	; 0x03
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	9c 81       	ldd	r25, Y+4	; 0x04
 7c8:	8a 97       	sbiw	r24, 0x2a	; 42
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <Washing_Machine+0x184>
 7cc:	73 cf       	rjmp	.-282    	; 0x6b4 <Washing_Machine+0x6a>
						_delay_ms(6);
					}
				}
				
				// for 21 total steps (21 steps * 8 array values * 6 ms = 1 s)
				for (uint16_t k = 0; k < 42; k++)
 7ce:	18 86       	std	Y+8, r1	; 0x08
 7d0:	1f 82       	std	Y+7, r1	; 0x07
 7d2:	88 c0       	rjmp	.+272    	; 0x8e4 <Washing_Machine+0x29a>
				{
					// cycle through HalfR[] array
					for (uint16_t j = 0; j < 8; j++)
 7d4:	1a 86       	std	Y+10, r1	; 0x0a
 7d6:	19 86       	std	Y+9, r1	; 0x09
 7d8:	7b c0       	rjmp	.+246    	; 0x8d0 <Washing_Machine+0x286>
					{
						// output each part of the HalfR[] array for every step
						Stepper_Output = HalfR[j];
 7da:	88 e2       	ldi	r24, 0x28	; 40
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	29 85       	ldd	r18, Y+9	; 0x09
 7e0:	3a 85       	ldd	r19, Y+10	; 0x0a
 7e2:	24 5f       	subi	r18, 0xF4	; 244
 7e4:	3d 4f       	sbci	r19, 0xFD	; 253
 7e6:	f9 01       	movw	r30, r18
 7e8:	20 81       	ld	r18, Z
 7ea:	fc 01       	movw	r30, r24
 7ec:	20 83       	st	Z, r18
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	a0 ec       	ldi	r26, 0xC0	; 192
 7f4:	b0 e4       	ldi	r27, 0x40	; 64
 7f6:	8d 8b       	std	Y+21, r24	; 0x15
 7f8:	9e 8b       	std	Y+22, r25	; 0x16
 7fa:	af 8b       	std	Y+23, r26	; 0x17
 7fc:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	4a e7       	ldi	r20, 0x7A	; 122
 804:	55 e4       	ldi	r21, 0x45	; 69
 806:	6d 89       	ldd	r22, Y+21	; 0x15
 808:	7e 89       	ldd	r23, Y+22	; 0x16
 80a:	8f 89       	ldd	r24, Y+23	; 0x17
 80c:	98 8d       	ldd	r25, Y+24	; 0x18
 80e:	af d2       	rcall	.+1374   	; 0xd6e <__mulsf3>
 810:	dc 01       	movw	r26, r24
 812:	cb 01       	movw	r24, r22
 814:	8f a7       	std	Y+47, r24	; 0x2f
 816:	98 ab       	std	Y+48, r25	; 0x30
 818:	a9 ab       	std	Y+49, r26	; 0x31
 81a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	40 e8       	ldi	r20, 0x80	; 128
 822:	5f e3       	ldi	r21, 0x3F	; 63
 824:	6f a5       	ldd	r22, Y+47	; 0x2f
 826:	78 a9       	ldd	r23, Y+48	; 0x30
 828:	89 a9       	ldd	r24, Y+49	; 0x31
 82a:	9a a9       	ldd	r25, Y+50	; 0x32
 82c:	1f d2       	rcall	.+1086   	; 0xc6c <__cmpsf2>
 82e:	88 23       	and	r24, r24
 830:	2c f4       	brge	.+10     	; 0x83c <Washing_Machine+0x1f2>
		__ticks = 1;
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	9c ab       	std	Y+52, r25	; 0x34
 838:	8b ab       	std	Y+51, r24	; 0x33
 83a:	3b c0       	rjmp	.+118    	; 0x8b2 <Washing_Machine+0x268>
	else if (__tmp > 65535)
 83c:	20 e0       	ldi	r18, 0x00	; 0
 83e:	3f ef       	ldi	r19, 0xFF	; 255
 840:	4f e7       	ldi	r20, 0x7F	; 127
 842:	57 e4       	ldi	r21, 0x47	; 71
 844:	6f a5       	ldd	r22, Y+47	; 0x2f
 846:	78 a9       	ldd	r23, Y+48	; 0x30
 848:	89 a9       	ldd	r24, Y+49	; 0x31
 84a:	9a a9       	ldd	r25, Y+50	; 0x32
 84c:	8c d2       	rcall	.+1304   	; 0xd66 <__gesf2>
 84e:	18 16       	cp	r1, r24
 850:	3c f5       	brge	.+78     	; 0x8a0 <Washing_Machine+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	40 e2       	ldi	r20, 0x20	; 32
 858:	51 e4       	ldi	r21, 0x41	; 65
 85a:	6d 89       	ldd	r22, Y+21	; 0x15
 85c:	7e 89       	ldd	r23, Y+22	; 0x16
 85e:	8f 89       	ldd	r24, Y+23	; 0x17
 860:	98 8d       	ldd	r25, Y+24	; 0x18
 862:	85 d2       	rcall	.+1290   	; 0xd6e <__mulsf3>
 864:	dc 01       	movw	r26, r24
 866:	cb 01       	movw	r24, r22
 868:	bc 01       	movw	r22, r24
 86a:	cd 01       	movw	r24, r26
 86c:	03 d2       	rcall	.+1030   	; 0xc74 <__fixunssfsi>
 86e:	dc 01       	movw	r26, r24
 870:	cb 01       	movw	r24, r22
 872:	9c ab       	std	Y+52, r25	; 0x34
 874:	8b ab       	std	Y+51, r24	; 0x33
 876:	0f c0       	rjmp	.+30     	; 0x896 <Washing_Machine+0x24c>
 878:	80 e9       	ldi	r24, 0x90	; 144
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	9e ab       	std	Y+54, r25	; 0x36
 87e:	8d ab       	std	Y+53, r24	; 0x35
 880:	8d a9       	ldd	r24, Y+53	; 0x35
 882:	9e a9       	ldd	r25, Y+54	; 0x36
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <Washing_Machine+0x23a>
 888:	9e ab       	std	Y+54, r25	; 0x36
 88a:	8d ab       	std	Y+53, r24	; 0x35
 88c:	8b a9       	ldd	r24, Y+51	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 88e:	9c a9       	ldd	r25, Y+52	; 0x34
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	9c ab       	std	Y+52, r25	; 0x34
 894:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 896:	8b a9       	ldd	r24, Y+51	; 0x33
 898:	9c a9       	ldd	r25, Y+52	; 0x34
 89a:	89 2b       	or	r24, r25
 89c:	69 f7       	brne	.-38     	; 0x878 <Washing_Machine+0x22e>
 89e:	13 c0       	rjmp	.+38     	; 0x8c6 <Washing_Machine+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8a0:	6f a5       	ldd	r22, Y+47	; 0x2f
 8a2:	78 a9       	ldd	r23, Y+48	; 0x30
 8a4:	89 a9       	ldd	r24, Y+49	; 0x31
 8a6:	9a a9       	ldd	r25, Y+50	; 0x32
 8a8:	e5 d1       	rcall	.+970    	; 0xc74 <__fixunssfsi>
 8aa:	dc 01       	movw	r26, r24
 8ac:	cb 01       	movw	r24, r22
 8ae:	9c ab       	std	Y+52, r25	; 0x34
 8b0:	8b ab       	std	Y+51, r24	; 0x33
 8b2:	8b a9       	ldd	r24, Y+51	; 0x33
 8b4:	9c a9       	ldd	r25, Y+52	; 0x34
 8b6:	98 af       	std	Y+56, r25	; 0x38
 8b8:	8f ab       	std	Y+55, r24	; 0x37
 8ba:	8f a9       	ldd	r24, Y+55	; 0x37
 8bc:	98 ad       	ldd	r25, Y+56	; 0x38
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <Washing_Machine+0x274>
 8c2:	98 af       	std	Y+56, r25	; 0x38
 8c4:	8f ab       	std	Y+55, r24	; 0x37
 8c6:	89 85       	ldd	r24, Y+9	; 0x09
				
				// for 21 total steps (21 steps * 8 array values * 6 ms = 1 s)
				for (uint16_t k = 0; k < 42; k++)
				{
					// cycle through HalfR[] array
					for (uint16_t j = 0; j < 8; j++)
 8c8:	9a 85       	ldd	r25, Y+10	; 0x0a
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	9a 87       	std	Y+10, r25	; 0x0a
 8ce:	89 87       	std	Y+9, r24	; 0x09
 8d0:	89 85       	ldd	r24, Y+9	; 0x09
 8d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 8d4:	08 97       	sbiw	r24, 0x08	; 8
 8d6:	08 f4       	brcc	.+2      	; 0x8da <Washing_Machine+0x290>
 8d8:	80 cf       	rjmp	.-256    	; 0x7da <Washing_Machine+0x190>
 8da:	8f 81       	ldd	r24, Y+7	; 0x07
						_delay_ms(6);
					}
				}
				
				// for 21 total steps (21 steps * 8 array values * 6 ms = 1 s)
				for (uint16_t k = 0; k < 42; k++)
 8dc:	98 85       	ldd	r25, Y+8	; 0x08
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	98 87       	std	Y+8, r25	; 0x08
 8e2:	8f 83       	std	Y+7, r24	; 0x07
 8e4:	8f 81       	ldd	r24, Y+7	; 0x07
 8e6:	98 85       	ldd	r25, Y+8	; 0x08
 8e8:	8a 97       	sbiw	r24, 0x2a	; 42
 8ea:	08 f4       	brcc	.+2      	; 0x8ee <Washing_Machine+0x2a4>
 8ec:	73 cf       	rjmp	.-282    	; 0x7d4 <Washing_Machine+0x18a>
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
		case 'A':
		{
			// start for loop, cycleTime_s/2 as there is 2 seconds for each CW/CCW

			
			for (uint16_t i = cycleTime_s/4; i > 0; i--)
 8f0:	9a 81       	ldd	r25, Y+2	; 0x02
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	9a 83       	std	Y+2, r25	; 0x02
 8f6:	89 83       	std	Y+1, r24	; 0x01
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	9a 81       	ldd	r25, Y+2	; 0x02
 8fc:	89 2b       	or	r24, r25
 8fe:	09 f0       	breq	.+2      	; 0x902 <Washing_Machine+0x2b8>
 900:	d6 ce       	rjmp	.-596    	; 0x6ae <Washing_Machine+0x64>
 902:	ce 01       	movw	r24, r28
						// delay by 6 ms
						_delay_ms(6);
					}
				}
			}
			if (cycleTime_s % 3 == 0)
 904:	82 5b       	subi	r24, 0xB2	; 178
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	fc 01       	movw	r30, r24
 90a:	20 81       	ld	r18, Z
 90c:	8b ea       	ldi	r24, 0xAB	; 171
 90e:	28 9f       	mul	r18, r24
 910:	81 2d       	mov	r24, r1
 912:	11 24       	eor	r1, r1
 914:	98 2f       	mov	r25, r24
 916:	96 95       	lsr	r25
 918:	89 2f       	mov	r24, r25
 91a:	88 0f       	add	r24, r24
 91c:	89 0f       	add	r24, r25
 91e:	92 2f       	mov	r25, r18
 920:	98 1b       	sub	r25, r24
 922:	99 23       	and	r25, r25
 924:	09 f0       	breq	.+2      	; 0x928 <Washing_Machine+0x2de>
 926:	94 c1       	rjmp	.+808    	; 0xc50 <Washing_Machine+0x606>
 928:	1c 86       	std	Y+12, r1	; 0x0c
			{
				for (uint16_t k = 0; k < 42; k++)
 92a:	1b 86       	std	Y+11, r1	; 0x0b
 92c:	9e c0       	rjmp	.+316    	; 0xa6a <Washing_Machine+0x420>
 92e:	1e 86       	std	Y+14, r1	; 0x0e
				{
					// cycle through HalfR[] array
					for (uint16_t j = 0; j < 8; j++)
 930:	1d 86       	std	Y+13, r1	; 0x0d
 932:	91 c0       	rjmp	.+290    	; 0xa56 <Washing_Machine+0x40c>
 934:	88 e2       	ldi	r24, 0x28	; 40
					{
						// output each part of the HalfR[] array for every step
						Stepper_Output = Half[j];
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	2d 85       	ldd	r18, Y+13	; 0x0d
 93a:	3e 85       	ldd	r19, Y+14	; 0x0e
 93c:	2c 5f       	subi	r18, 0xFC	; 252
 93e:	3d 4f       	sbci	r19, 0xFD	; 253
 940:	f9 01       	movw	r30, r18
 942:	20 81       	ld	r18, Z
 944:	fc 01       	movw	r30, r24
 946:	20 83       	st	Z, r18
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	a0 ec       	ldi	r26, 0xC0	; 192
 94e:	b0 e4       	ldi	r27, 0x40	; 64
 950:	89 8f       	std	Y+25, r24	; 0x19
 952:	9a 8f       	std	Y+26, r25	; 0x1a
 954:	ab 8f       	std	Y+27, r26	; 0x1b
 956:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 958:	20 e0       	ldi	r18, 0x00	; 0
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	4a e7       	ldi	r20, 0x7A	; 122
 95e:	55 e4       	ldi	r21, 0x45	; 69
 960:	69 8d       	ldd	r22, Y+25	; 0x19
 962:	7a 8d       	ldd	r23, Y+26	; 0x1a
 964:	8b 8d       	ldd	r24, Y+27	; 0x1b
 966:	9c 8d       	ldd	r25, Y+28	; 0x1c
 968:	02 d2       	rcall	.+1028   	; 0xd6e <__mulsf3>
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	89 af       	std	Y+57, r24	; 0x39
 970:	9a af       	std	Y+58, r25	; 0x3a
 972:	ab af       	std	Y+59, r26	; 0x3b
 974:	bc af       	std	Y+60, r27	; 0x3c
	if (__tmp < 1.0)
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	40 e8       	ldi	r20, 0x80	; 128
 97c:	5f e3       	ldi	r21, 0x3F	; 63
 97e:	69 ad       	ldd	r22, Y+57	; 0x39
 980:	7a ad       	ldd	r23, Y+58	; 0x3a
 982:	8b ad       	ldd	r24, Y+59	; 0x3b
 984:	9c ad       	ldd	r25, Y+60	; 0x3c
 986:	72 d1       	rcall	.+740    	; 0xc6c <__cmpsf2>
 988:	88 23       	and	r24, r24
 98a:	2c f4       	brge	.+10     	; 0x996 <Washing_Machine+0x34c>
		__ticks = 1;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	9e af       	std	Y+62, r25	; 0x3e
 992:	8d af       	std	Y+61, r24	; 0x3d
 994:	45 c0       	rjmp	.+138    	; 0xa20 <Washing_Machine+0x3d6>
	else if (__tmp > 65535)
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	3f ef       	ldi	r19, 0xFF	; 255
 99a:	4f e7       	ldi	r20, 0x7F	; 127
 99c:	57 e4       	ldi	r21, 0x47	; 71
 99e:	69 ad       	ldd	r22, Y+57	; 0x39
 9a0:	7a ad       	ldd	r23, Y+58	; 0x3a
 9a2:	8b ad       	ldd	r24, Y+59	; 0x3b
 9a4:	9c ad       	ldd	r25, Y+60	; 0x3c
 9a6:	df d1       	rcall	.+958    	; 0xd66 <__gesf2>
 9a8:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9aa:	8c f5       	brge	.+98     	; 0xa0e <Washing_Machine+0x3c4>
 9ac:	20 e0       	ldi	r18, 0x00	; 0
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	40 e2       	ldi	r20, 0x20	; 32
 9b2:	51 e4       	ldi	r21, 0x41	; 65
 9b4:	69 8d       	ldd	r22, Y+25	; 0x19
 9b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 9ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
 9bc:	d8 d1       	rcall	.+944    	; 0xd6e <__mulsf3>
 9be:	dc 01       	movw	r26, r24
 9c0:	cb 01       	movw	r24, r22
 9c2:	bc 01       	movw	r22, r24
 9c4:	cd 01       	movw	r24, r26
 9c6:	56 d1       	rcall	.+684    	; 0xc74 <__fixunssfsi>
 9c8:	dc 01       	movw	r26, r24
 9ca:	cb 01       	movw	r24, r22
 9cc:	9e af       	std	Y+62, r25	; 0x3e
 9ce:	8d af       	std	Y+61, r24	; 0x3d
 9d0:	19 c0       	rjmp	.+50     	; 0xa04 <Washing_Machine+0x3ba>
 9d2:	20 e9       	ldi	r18, 0x90	; 144
 9d4:	31 e0       	ldi	r19, 0x01	; 1
 9d6:	ce 01       	movw	r24, r28
 9d8:	cf 96       	adiw	r24, 0x3f	; 63
 9da:	fc 01       	movw	r30, r24
 9dc:	31 83       	std	Z+1, r19	; 0x01
 9de:	20 83       	st	Z, r18
 9e0:	ce 01       	movw	r24, r28
 9e2:	cf 96       	adiw	r24, 0x3f	; 63
 9e4:	fc 01       	movw	r30, r24
 9e6:	80 81       	ld	r24, Z
 9e8:	91 81       	ldd	r25, Z+1	; 0x01
 9ea:	01 97       	sbiw	r24, 0x01	; 1
 9ec:	f1 f7       	brne	.-4      	; 0x9ea <Washing_Machine+0x3a0>
 9ee:	9e 01       	movw	r18, r28
 9f0:	21 5c       	subi	r18, 0xC1	; 193
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	f9 01       	movw	r30, r18
 9f6:	91 83       	std	Z+1, r25	; 0x01
 9f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9fa:	8d ad       	ldd	r24, Y+61	; 0x3d
 9fc:	9e ad       	ldd	r25, Y+62	; 0x3e
 9fe:	01 97       	sbiw	r24, 0x01	; 1
 a00:	9e af       	std	Y+62, r25	; 0x3e
 a02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a04:	8d ad       	ldd	r24, Y+61	; 0x3d
 a06:	9e ad       	ldd	r25, Y+62	; 0x3e
 a08:	89 2b       	or	r24, r25
 a0a:	19 f7       	brne	.-58     	; 0x9d2 <Washing_Machine+0x388>
 a0c:	1f c0       	rjmp	.+62     	; 0xa4c <Washing_Machine+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a0e:	69 ad       	ldd	r22, Y+57	; 0x39
 a10:	7a ad       	ldd	r23, Y+58	; 0x3a
 a12:	8b ad       	ldd	r24, Y+59	; 0x3b
 a14:	9c ad       	ldd	r25, Y+60	; 0x3c
 a16:	2e d1       	rcall	.+604    	; 0xc74 <__fixunssfsi>
 a18:	dc 01       	movw	r26, r24
 a1a:	cb 01       	movw	r24, r22
 a1c:	9e af       	std	Y+62, r25	; 0x3e
 a1e:	8d af       	std	Y+61, r24	; 0x3d
 a20:	ce 01       	movw	r24, r28
 a22:	8f 5b       	subi	r24, 0xBF	; 191
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	2d ad       	ldd	r18, Y+61	; 0x3d
 a28:	3e ad       	ldd	r19, Y+62	; 0x3e
 a2a:	fc 01       	movw	r30, r24
 a2c:	31 83       	std	Z+1, r19	; 0x01
 a2e:	20 83       	st	Z, r18
 a30:	ce 01       	movw	r24, r28
 a32:	8f 5b       	subi	r24, 0xBF	; 191
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	fc 01       	movw	r30, r24
 a38:	80 81       	ld	r24, Z
 a3a:	91 81       	ldd	r25, Z+1	; 0x01
 a3c:	01 97       	sbiw	r24, 0x01	; 1
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <Washing_Machine+0x3f2>
 a40:	9e 01       	movw	r18, r28
 a42:	2f 5b       	subi	r18, 0xBF	; 191
 a44:	3f 4f       	sbci	r19, 0xFF	; 255
 a46:	f9 01       	movw	r30, r18
 a48:	91 83       	std	Z+1, r25	; 0x01
 a4a:	80 83       	st	Z, r24
 a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
			if (cycleTime_s % 3 == 0)
			{
				for (uint16_t k = 0; k < 42; k++)
				{
					// cycle through HalfR[] array
					for (uint16_t j = 0; j < 8; j++)
 a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
 a50:	01 96       	adiw	r24, 0x01	; 1
 a52:	9e 87       	std	Y+14, r25	; 0x0e
 a54:	8d 87       	std	Y+13, r24	; 0x0d
 a56:	8d 85       	ldd	r24, Y+13	; 0x0d
 a58:	9e 85       	ldd	r25, Y+14	; 0x0e
 a5a:	08 97       	sbiw	r24, 0x08	; 8
 a5c:	08 f4       	brcc	.+2      	; 0xa60 <Washing_Machine+0x416>
 a5e:	6a cf       	rjmp	.-300    	; 0x934 <Washing_Machine+0x2ea>
 a60:	8b 85       	ldd	r24, Y+11	; 0x0b
					}
				}
			}
			if (cycleTime_s % 3 == 0)
			{
				for (uint16_t k = 0; k < 42; k++)
 a62:	9c 85       	ldd	r25, Y+12	; 0x0c
 a64:	01 96       	adiw	r24, 0x01	; 1
 a66:	9c 87       	std	Y+12, r25	; 0x0c
 a68:	8b 87       	std	Y+11, r24	; 0x0b
 a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
 a6c:	9c 85       	ldd	r25, Y+12	; 0x0c
 a6e:	8a 97       	sbiw	r24, 0x2a	; 42
 a70:	08 f4       	brcc	.+2      	; 0xa74 <Washing_Machine+0x42a>
 a72:	5d cf       	rjmp	.-326    	; 0x92e <Washing_Machine+0x2e4>
 a74:	ed c0       	rjmp	.+474    	; 0xc50 <Washing_Machine+0x606>
						// delay by 6 ms
						_delay_ms(6);
					}
				}
			}
			break;
 a76:	ce 01       	movw	r24, r28
		
		// if spin mode is selected
		case 'S':
		{
			// for how ever many seconds is desired
			for (int i = cycleTime_s; i > 0; i--)
 a78:	82 5b       	subi	r24, 0xB2	; 178
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	fc 01       	movw	r30, r24
 a7e:	80 81       	ld	r24, Z
 a80:	88 2f       	mov	r24, r24
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	98 8b       	std	Y+16, r25	; 0x10
 a86:	8f 87       	std	Y+15, r24	; 0x0f
 a88:	dc c0       	rjmp	.+440    	; 0xc42 <Washing_Machine+0x5f8>
 a8a:	1a 8a       	std	Y+18, r1	; 0x12
			{
				// 84 * 4 array values * 3 ms = 1 second, 
				for (uint16_t k = 0; k < 84; k++)
 a8c:	19 8a       	std	Y+17, r1	; 0x11
 a8e:	ce c0       	rjmp	.+412    	; 0xc2c <Washing_Machine+0x5e2>
 a90:	1c 8a       	std	Y+20, r1	; 0x14
				{
					// there are four values input per step; begin new for loop inside
					// step loop
					for (uint16_t j = 0; j < 4; j++)
 a92:	1b 8a       	std	Y+19, r1	; 0x13
 a94:	c1 c0       	rjmp	.+386    	; 0xc18 <Washing_Machine+0x5ce>
 a96:	88 e2       	ldi	r24, 0x28	; 40
					{
						// output each part of the Wave[] array for every step
						Stepper_Output = Wave[j];
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	2b 89       	ldd	r18, Y+19	; 0x13
 a9c:	3c 89       	ldd	r19, Y+20	; 0x14
 a9e:	20 50       	subi	r18, 0x00	; 0
 aa0:	3e 4f       	sbci	r19, 0xFE	; 254
 aa2:	f9 01       	movw	r30, r18
 aa4:	20 81       	ld	r18, Z
 aa6:	fc 01       	movw	r30, r24
 aa8:	20 83       	st	Z, r18
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	a0 e4       	ldi	r26, 0x40	; 64
 ab0:	b0 e4       	ldi	r27, 0x40	; 64
 ab2:	8d 8f       	std	Y+29, r24	; 0x1d
 ab4:	9e 8f       	std	Y+30, r25	; 0x1e
 ab6:	af 8f       	std	Y+31, r26	; 0x1f
 ab8:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 aba:	8e 01       	movw	r16, r28
 abc:	0d 5b       	subi	r16, 0xBD	; 189
 abe:	1f 4f       	sbci	r17, 0xFF	; 255
 ac0:	20 e0       	ldi	r18, 0x00	; 0
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	4a e7       	ldi	r20, 0x7A	; 122
 ac6:	55 e4       	ldi	r21, 0x45	; 69
 ac8:	6d 8d       	ldd	r22, Y+29	; 0x1d
 aca:	7e 8d       	ldd	r23, Y+30	; 0x1e
 acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
 ace:	98 a1       	ldd	r25, Y+32	; 0x20
 ad0:	4e d1       	rcall	.+668    	; 0xd6e <__mulsf3>
 ad2:	dc 01       	movw	r26, r24
 ad4:	cb 01       	movw	r24, r22
 ad6:	f8 01       	movw	r30, r16
 ad8:	80 83       	st	Z, r24
 ada:	91 83       	std	Z+1, r25	; 0x01
 adc:	a2 83       	std	Z+2, r26	; 0x02
 ade:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 ae0:	ce 01       	movw	r24, r28
 ae2:	8d 5b       	subi	r24, 0xBD	; 189
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	20 e0       	ldi	r18, 0x00	; 0
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	40 e8       	ldi	r20, 0x80	; 128
 aec:	5f e3       	ldi	r21, 0x3F	; 63
 aee:	fc 01       	movw	r30, r24
 af0:	60 81       	ld	r22, Z
 af2:	71 81       	ldd	r23, Z+1	; 0x01
 af4:	82 81       	ldd	r24, Z+2	; 0x02
 af6:	93 81       	ldd	r25, Z+3	; 0x03
 af8:	b9 d0       	rcall	.+370    	; 0xc6c <__cmpsf2>
 afa:	88 23       	and	r24, r24
 afc:	4c f4       	brge	.+18     	; 0xb10 <Washing_Machine+0x4c6>
 afe:	ce 01       	movw	r24, r28
		__ticks = 1;
 b00:	89 5b       	subi	r24, 0xB9	; 185
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	21 e0       	ldi	r18, 0x01	; 1
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	fc 01       	movw	r30, r24
 b0a:	31 83       	std	Z+1, r19	; 0x01
 b0c:	20 83       	st	Z, r18
 b0e:	65 c0       	rjmp	.+202    	; 0xbda <Washing_Machine+0x590>
	else if (__tmp > 65535)
 b10:	ce 01       	movw	r24, r28
 b12:	8d 5b       	subi	r24, 0xBD	; 189
 b14:	9f 4f       	sbci	r25, 0xFF	; 255
 b16:	20 e0       	ldi	r18, 0x00	; 0
 b18:	3f ef       	ldi	r19, 0xFF	; 255
 b1a:	4f e7       	ldi	r20, 0x7F	; 127
 b1c:	57 e4       	ldi	r21, 0x47	; 71
 b1e:	fc 01       	movw	r30, r24
 b20:	60 81       	ld	r22, Z
 b22:	71 81       	ldd	r23, Z+1	; 0x01
 b24:	82 81       	ldd	r24, Z+2	; 0x02
 b26:	93 81       	ldd	r25, Z+3	; 0x03
 b28:	1e d1       	rcall	.+572    	; 0xd66 <__gesf2>
 b2a:	18 16       	cp	r1, r24
 b2c:	0c f0       	brlt	.+2      	; 0xb30 <Washing_Machine+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 b2e:	44 c0       	rjmp	.+136    	; 0xbb8 <Washing_Machine+0x56e>
 b30:	20 e0       	ldi	r18, 0x00	; 0
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	40 e2       	ldi	r20, 0x20	; 32
 b36:	51 e4       	ldi	r21, 0x41	; 65
 b38:	6d 8d       	ldd	r22, Y+29	; 0x1d
 b3a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 b3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 b3e:	98 a1       	ldd	r25, Y+32	; 0x20
 b40:	16 d1       	rcall	.+556    	; 0xd6e <__mulsf3>
 b42:	dc 01       	movw	r26, r24
 b44:	cb 01       	movw	r24, r22
 b46:	8e 01       	movw	r16, r28
 b48:	09 5b       	subi	r16, 0xB9	; 185
 b4a:	1f 4f       	sbci	r17, 0xFF	; 255
 b4c:	bc 01       	movw	r22, r24
 b4e:	cd 01       	movw	r24, r26
 b50:	91 d0       	rcall	.+290    	; 0xc74 <__fixunssfsi>
 b52:	dc 01       	movw	r26, r24
 b54:	cb 01       	movw	r24, r22
 b56:	f8 01       	movw	r30, r16
 b58:	91 83       	std	Z+1, r25	; 0x01
 b5a:	80 83       	st	Z, r24
 b5c:	24 c0       	rjmp	.+72     	; 0xba6 <Washing_Machine+0x55c>
 b5e:	ce 01       	movw	r24, r28
 b60:	87 5b       	subi	r24, 0xB7	; 183
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	20 e9       	ldi	r18, 0x90	; 144
 b66:	31 e0       	ldi	r19, 0x01	; 1
 b68:	fc 01       	movw	r30, r24
 b6a:	31 83       	std	Z+1, r19	; 0x01
 b6c:	20 83       	st	Z, r18
 b6e:	ce 01       	movw	r24, r28
 b70:	87 5b       	subi	r24, 0xB7	; 183
 b72:	9f 4f       	sbci	r25, 0xFF	; 255
 b74:	fc 01       	movw	r30, r24
 b76:	80 81       	ld	r24, Z
 b78:	91 81       	ldd	r25, Z+1	; 0x01
 b7a:	01 97       	sbiw	r24, 0x01	; 1
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <Washing_Machine+0x530>
 b7e:	9e 01       	movw	r18, r28
 b80:	27 5b       	subi	r18, 0xB7	; 183
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	f9 01       	movw	r30, r18
 b86:	91 83       	std	Z+1, r25	; 0x01
 b88:	80 83       	st	Z, r24
 b8a:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b8c:	89 5b       	subi	r24, 0xB9	; 185
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	9e 01       	movw	r18, r28
 b92:	29 5b       	subi	r18, 0xB9	; 185
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	f9 01       	movw	r30, r18
 b98:	20 81       	ld	r18, Z
 b9a:	31 81       	ldd	r19, Z+1	; 0x01
 b9c:	21 50       	subi	r18, 0x01	; 1
 b9e:	31 09       	sbc	r19, r1
 ba0:	fc 01       	movw	r30, r24
 ba2:	31 83       	std	Z+1, r19	; 0x01
 ba4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 ba6:	ce 01       	movw	r24, r28
 ba8:	89 5b       	subi	r24, 0xB9	; 185
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	fc 01       	movw	r30, r24
 bae:	80 81       	ld	r24, Z
 bb0:	91 81       	ldd	r25, Z+1	; 0x01
 bb2:	89 2b       	or	r24, r25
 bb4:	a1 f6       	brne	.-88     	; 0xb5e <Washing_Machine+0x514>
 bb6:	2b c0       	rjmp	.+86     	; 0xc0e <Washing_Machine+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 bb8:	8e 01       	movw	r16, r28
 bba:	09 5b       	subi	r16, 0xB9	; 185
 bbc:	1f 4f       	sbci	r17, 0xFF	; 255
 bbe:	ce 01       	movw	r24, r28
 bc0:	8d 5b       	subi	r24, 0xBD	; 189
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	fc 01       	movw	r30, r24
 bc6:	60 81       	ld	r22, Z
 bc8:	71 81       	ldd	r23, Z+1	; 0x01
 bca:	82 81       	ldd	r24, Z+2	; 0x02
 bcc:	93 81       	ldd	r25, Z+3	; 0x03
 bce:	52 d0       	rcall	.+164    	; 0xc74 <__fixunssfsi>
 bd0:	dc 01       	movw	r26, r24
 bd2:	cb 01       	movw	r24, r22
 bd4:	f8 01       	movw	r30, r16
 bd6:	91 83       	std	Z+1, r25	; 0x01
 bd8:	80 83       	st	Z, r24
 bda:	ce 01       	movw	r24, r28
 bdc:	85 5b       	subi	r24, 0xB5	; 181
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	9e 01       	movw	r18, r28
 be2:	29 5b       	subi	r18, 0xB9	; 185
 be4:	3f 4f       	sbci	r19, 0xFF	; 255
 be6:	f9 01       	movw	r30, r18
 be8:	20 81       	ld	r18, Z
 bea:	31 81       	ldd	r19, Z+1	; 0x01
 bec:	fc 01       	movw	r30, r24
 bee:	31 83       	std	Z+1, r19	; 0x01
 bf0:	20 83       	st	Z, r18
 bf2:	ce 01       	movw	r24, r28
 bf4:	85 5b       	subi	r24, 0xB5	; 181
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	fc 01       	movw	r30, r24
 bfa:	80 81       	ld	r24, Z
 bfc:	91 81       	ldd	r25, Z+1	; 0x01
 bfe:	01 97       	sbiw	r24, 0x01	; 1
 c00:	f1 f7       	brne	.-4      	; 0xbfe <Washing_Machine+0x5b4>
 c02:	9e 01       	movw	r18, r28
 c04:	25 5b       	subi	r18, 0xB5	; 181
 c06:	3f 4f       	sbci	r19, 0xFF	; 255
 c08:	f9 01       	movw	r30, r18
 c0a:	91 83       	std	Z+1, r25	; 0x01
 c0c:	80 83       	st	Z, r24
 c0e:	8b 89       	ldd	r24, Y+19	; 0x13
				// 84 * 4 array values * 3 ms = 1 second, 
				for (uint16_t k = 0; k < 84; k++)
				{
					// there are four values input per step; begin new for loop inside
					// step loop
					for (uint16_t j = 0; j < 4; j++)
 c10:	9c 89       	ldd	r25, Y+20	; 0x14
 c12:	01 96       	adiw	r24, 0x01	; 1
 c14:	9c 8b       	std	Y+20, r25	; 0x14
 c16:	8b 8b       	std	Y+19, r24	; 0x13
 c18:	8b 89       	ldd	r24, Y+19	; 0x13
 c1a:	9c 89       	ldd	r25, Y+20	; 0x14
 c1c:	04 97       	sbiw	r24, 0x04	; 4
 c1e:	08 f4       	brcc	.+2      	; 0xc22 <Washing_Machine+0x5d8>
 c20:	3a cf       	rjmp	.-396    	; 0xa96 <Washing_Machine+0x44c>
 c22:	89 89       	ldd	r24, Y+17	; 0x11
		{
			// for how ever many seconds is desired
			for (int i = cycleTime_s; i > 0; i--)
			{
				// 84 * 4 array values * 3 ms = 1 second, 
				for (uint16_t k = 0; k < 84; k++)
 c24:	9a 89       	ldd	r25, Y+18	; 0x12
 c26:	01 96       	adiw	r24, 0x01	; 1
 c28:	9a 8b       	std	Y+18, r25	; 0x12
 c2a:	89 8b       	std	Y+17, r24	; 0x11
 c2c:	89 89       	ldd	r24, Y+17	; 0x11
 c2e:	9a 89       	ldd	r25, Y+18	; 0x12
 c30:	84 35       	cpi	r24, 0x54	; 84
 c32:	91 05       	cpc	r25, r1
 c34:	08 f4       	brcc	.+2      	; 0xc38 <Washing_Machine+0x5ee>
 c36:	2c cf       	rjmp	.-424    	; 0xa90 <Washing_Machine+0x446>
 c38:	8f 85       	ldd	r24, Y+15	; 0x0f
		
		// if spin mode is selected
		case 'S':
		{
			// for how ever many seconds is desired
			for (int i = cycleTime_s; i > 0; i--)
 c3a:	98 89       	ldd	r25, Y+16	; 0x10
 c3c:	01 97       	sbiw	r24, 0x01	; 1
 c3e:	98 8b       	std	Y+16, r25	; 0x10
 c40:	8f 87       	std	Y+15, r24	; 0x0f
 c42:	8f 85       	ldd	r24, Y+15	; 0x0f
 c44:	98 89       	ldd	r25, Y+16	; 0x10
 c46:	18 16       	cp	r1, r24
 c48:	19 06       	cpc	r1, r25
 c4a:	0c f4       	brge	.+2      	; 0xc4e <Washing_Machine+0x604>
 c4c:	1e cf       	rjmp	.-452    	; 0xa8a <Washing_Machine+0x440>
 c4e:	01 c0       	rjmp	.+2      	; 0xc52 <Washing_Machine+0x608>
						// delay by 3 ms
						_delay_ms(3);
					}
				}
			}
			break;
 c50:	00 00       	nop
						// delay by 6 ms
						_delay_ms(6);
					}
				}
			}
			break;
 c52:	00 00       	nop
				}
			}
			break;
		}
	}
 c54:	c2 5b       	subi	r28, 0xB2	; 178
 c56:	df 4f       	sbci	r29, 0xFF	; 255
 c58:	0f b6       	in	r0, 0x3f	; 63
 c5a:	f8 94       	cli
 c5c:	de bf       	out	0x3e, r29	; 62
 c5e:	0f be       	out	0x3f, r0	; 63
 c60:	cd bf       	out	0x3d, r28	; 61
 c62:	df 91       	pop	r29
 c64:	cf 91       	pop	r28
 c66:	1f 91       	pop	r17
 c68:	0f 91       	pop	r16
 c6a:	08 95       	ret

00000c6c <__cmpsf2>:
 c6c:	2f d0       	rcall	.+94     	; 0xccc <__fp_cmp>
 c6e:	08 f4       	brcc	.+2      	; 0xc72 <__cmpsf2+0x6>
 c70:	81 e0       	ldi	r24, 0x01	; 1
 c72:	08 95       	ret

00000c74 <__fixunssfsi>:
 c74:	57 d0       	rcall	.+174    	; 0xd24 <__fp_splitA>
 c76:	88 f0       	brcs	.+34     	; 0xc9a <__fixunssfsi+0x26>
 c78:	9f 57       	subi	r25, 0x7F	; 127
 c7a:	90 f0       	brcs	.+36     	; 0xca0 <__fixunssfsi+0x2c>
 c7c:	b9 2f       	mov	r27, r25
 c7e:	99 27       	eor	r25, r25
 c80:	b7 51       	subi	r27, 0x17	; 23
 c82:	a0 f0       	brcs	.+40     	; 0xcac <__fixunssfsi+0x38>
 c84:	d1 f0       	breq	.+52     	; 0xcba <__fixunssfsi+0x46>
 c86:	66 0f       	add	r22, r22
 c88:	77 1f       	adc	r23, r23
 c8a:	88 1f       	adc	r24, r24
 c8c:	99 1f       	adc	r25, r25
 c8e:	1a f0       	brmi	.+6      	; 0xc96 <__fixunssfsi+0x22>
 c90:	ba 95       	dec	r27
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__fixunssfsi+0x12>
 c94:	12 c0       	rjmp	.+36     	; 0xcba <__fixunssfsi+0x46>
 c96:	b1 30       	cpi	r27, 0x01	; 1
 c98:	81 f0       	breq	.+32     	; 0xcba <__fixunssfsi+0x46>
 c9a:	5e d0       	rcall	.+188    	; 0xd58 <__fp_zero>
 c9c:	b1 e0       	ldi	r27, 0x01	; 1
 c9e:	08 95       	ret
 ca0:	5b c0       	rjmp	.+182    	; 0xd58 <__fp_zero>
 ca2:	67 2f       	mov	r22, r23
 ca4:	78 2f       	mov	r23, r24
 ca6:	88 27       	eor	r24, r24
 ca8:	b8 5f       	subi	r27, 0xF8	; 248
 caa:	39 f0       	breq	.+14     	; 0xcba <__fixunssfsi+0x46>
 cac:	b9 3f       	cpi	r27, 0xF9	; 249
 cae:	cc f3       	brlt	.-14     	; 0xca2 <__fixunssfsi+0x2e>
 cb0:	86 95       	lsr	r24
 cb2:	77 95       	ror	r23
 cb4:	67 95       	ror	r22
 cb6:	b3 95       	inc	r27
 cb8:	d9 f7       	brne	.-10     	; 0xcb0 <__fixunssfsi+0x3c>
 cba:	3e f4       	brtc	.+14     	; 0xcca <__fixunssfsi+0x56>
 cbc:	90 95       	com	r25
 cbe:	80 95       	com	r24
 cc0:	70 95       	com	r23
 cc2:	61 95       	neg	r22
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	08 95       	ret

00000ccc <__fp_cmp>:
 ccc:	99 0f       	add	r25, r25
 cce:	00 08       	sbc	r0, r0
 cd0:	55 0f       	add	r21, r21
 cd2:	aa 0b       	sbc	r26, r26
 cd4:	e0 e8       	ldi	r30, 0x80	; 128
 cd6:	fe ef       	ldi	r31, 0xFE	; 254
 cd8:	16 16       	cp	r1, r22
 cda:	17 06       	cpc	r1, r23
 cdc:	e8 07       	cpc	r30, r24
 cde:	f9 07       	cpc	r31, r25
 ce0:	c0 f0       	brcs	.+48     	; 0xd12 <__fp_cmp+0x46>
 ce2:	12 16       	cp	r1, r18
 ce4:	13 06       	cpc	r1, r19
 ce6:	e4 07       	cpc	r30, r20
 ce8:	f5 07       	cpc	r31, r21
 cea:	98 f0       	brcs	.+38     	; 0xd12 <__fp_cmp+0x46>
 cec:	62 1b       	sub	r22, r18
 cee:	73 0b       	sbc	r23, r19
 cf0:	84 0b       	sbc	r24, r20
 cf2:	95 0b       	sbc	r25, r21
 cf4:	39 f4       	brne	.+14     	; 0xd04 <__fp_cmp+0x38>
 cf6:	0a 26       	eor	r0, r26
 cf8:	61 f0       	breq	.+24     	; 0xd12 <__fp_cmp+0x46>
 cfa:	23 2b       	or	r18, r19
 cfc:	24 2b       	or	r18, r20
 cfe:	25 2b       	or	r18, r21
 d00:	21 f4       	brne	.+8      	; 0xd0a <__fp_cmp+0x3e>
 d02:	08 95       	ret
 d04:	0a 26       	eor	r0, r26
 d06:	09 f4       	brne	.+2      	; 0xd0a <__fp_cmp+0x3e>
 d08:	a1 40       	sbci	r26, 0x01	; 1
 d0a:	a6 95       	lsr	r26
 d0c:	8f ef       	ldi	r24, 0xFF	; 255
 d0e:	81 1d       	adc	r24, r1
 d10:	81 1d       	adc	r24, r1
 d12:	08 95       	ret

00000d14 <__fp_split3>:
 d14:	57 fd       	sbrc	r21, 7
 d16:	90 58       	subi	r25, 0x80	; 128
 d18:	44 0f       	add	r20, r20
 d1a:	55 1f       	adc	r21, r21
 d1c:	59 f0       	breq	.+22     	; 0xd34 <__fp_splitA+0x10>
 d1e:	5f 3f       	cpi	r21, 0xFF	; 255
 d20:	71 f0       	breq	.+28     	; 0xd3e <__fp_splitA+0x1a>
 d22:	47 95       	ror	r20

00000d24 <__fp_splitA>:
 d24:	88 0f       	add	r24, r24
 d26:	97 fb       	bst	r25, 7
 d28:	99 1f       	adc	r25, r25
 d2a:	61 f0       	breq	.+24     	; 0xd44 <__fp_splitA+0x20>
 d2c:	9f 3f       	cpi	r25, 0xFF	; 255
 d2e:	79 f0       	breq	.+30     	; 0xd4e <__fp_splitA+0x2a>
 d30:	87 95       	ror	r24
 d32:	08 95       	ret
 d34:	12 16       	cp	r1, r18
 d36:	13 06       	cpc	r1, r19
 d38:	14 06       	cpc	r1, r20
 d3a:	55 1f       	adc	r21, r21
 d3c:	f2 cf       	rjmp	.-28     	; 0xd22 <__fp_split3+0xe>
 d3e:	46 95       	lsr	r20
 d40:	f1 df       	rcall	.-30     	; 0xd24 <__fp_splitA>
 d42:	08 c0       	rjmp	.+16     	; 0xd54 <__fp_splitA+0x30>
 d44:	16 16       	cp	r1, r22
 d46:	17 06       	cpc	r1, r23
 d48:	18 06       	cpc	r1, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	f1 cf       	rjmp	.-30     	; 0xd30 <__fp_splitA+0xc>
 d4e:	86 95       	lsr	r24
 d50:	71 05       	cpc	r23, r1
 d52:	61 05       	cpc	r22, r1
 d54:	08 94       	sec
 d56:	08 95       	ret

00000d58 <__fp_zero>:
 d58:	e8 94       	clt

00000d5a <__fp_szero>:
 d5a:	bb 27       	eor	r27, r27
 d5c:	66 27       	eor	r22, r22
 d5e:	77 27       	eor	r23, r23
 d60:	cb 01       	movw	r24, r22
 d62:	97 f9       	bld	r25, 7
 d64:	08 95       	ret

00000d66 <__gesf2>:
 d66:	b2 df       	rcall	.-156    	; 0xccc <__fp_cmp>
 d68:	08 f4       	brcc	.+2      	; 0xd6c <__gesf2+0x6>
 d6a:	8f ef       	ldi	r24, 0xFF	; 255
 d6c:	08 95       	ret

00000d6e <__mulsf3>:
 d6e:	0b d0       	rcall	.+22     	; 0xd86 <__mulsf3x>
 d70:	78 c0       	rjmp	.+240    	; 0xe62 <__fp_round>
 d72:	69 d0       	rcall	.+210    	; 0xe46 <__fp_pscA>
 d74:	28 f0       	brcs	.+10     	; 0xd80 <__mulsf3+0x12>
 d76:	6e d0       	rcall	.+220    	; 0xe54 <__fp_pscB>
 d78:	18 f0       	brcs	.+6      	; 0xd80 <__mulsf3+0x12>
 d7a:	95 23       	and	r25, r21
 d7c:	09 f0       	breq	.+2      	; 0xd80 <__mulsf3+0x12>
 d7e:	5a c0       	rjmp	.+180    	; 0xe34 <__fp_inf>
 d80:	5f c0       	rjmp	.+190    	; 0xe40 <__fp_nan>
 d82:	11 24       	eor	r1, r1
 d84:	ea cf       	rjmp	.-44     	; 0xd5a <__fp_szero>

00000d86 <__mulsf3x>:
 d86:	c6 df       	rcall	.-116    	; 0xd14 <__fp_split3>
 d88:	a0 f3       	brcs	.-24     	; 0xd72 <__mulsf3+0x4>

00000d8a <__mulsf3_pse>:
 d8a:	95 9f       	mul	r25, r21
 d8c:	d1 f3       	breq	.-12     	; 0xd82 <__mulsf3+0x14>
 d8e:	95 0f       	add	r25, r21
 d90:	50 e0       	ldi	r21, 0x00	; 0
 d92:	55 1f       	adc	r21, r21
 d94:	62 9f       	mul	r22, r18
 d96:	f0 01       	movw	r30, r0
 d98:	72 9f       	mul	r23, r18
 d9a:	bb 27       	eor	r27, r27
 d9c:	f0 0d       	add	r31, r0
 d9e:	b1 1d       	adc	r27, r1
 da0:	63 9f       	mul	r22, r19
 da2:	aa 27       	eor	r26, r26
 da4:	f0 0d       	add	r31, r0
 da6:	b1 1d       	adc	r27, r1
 da8:	aa 1f       	adc	r26, r26
 daa:	64 9f       	mul	r22, r20
 dac:	66 27       	eor	r22, r22
 dae:	b0 0d       	add	r27, r0
 db0:	a1 1d       	adc	r26, r1
 db2:	66 1f       	adc	r22, r22
 db4:	82 9f       	mul	r24, r18
 db6:	22 27       	eor	r18, r18
 db8:	b0 0d       	add	r27, r0
 dba:	a1 1d       	adc	r26, r1
 dbc:	62 1f       	adc	r22, r18
 dbe:	73 9f       	mul	r23, r19
 dc0:	b0 0d       	add	r27, r0
 dc2:	a1 1d       	adc	r26, r1
 dc4:	62 1f       	adc	r22, r18
 dc6:	83 9f       	mul	r24, r19
 dc8:	a0 0d       	add	r26, r0
 dca:	61 1d       	adc	r22, r1
 dcc:	22 1f       	adc	r18, r18
 dce:	74 9f       	mul	r23, r20
 dd0:	33 27       	eor	r19, r19
 dd2:	a0 0d       	add	r26, r0
 dd4:	61 1d       	adc	r22, r1
 dd6:	23 1f       	adc	r18, r19
 dd8:	84 9f       	mul	r24, r20
 dda:	60 0d       	add	r22, r0
 ddc:	21 1d       	adc	r18, r1
 dde:	82 2f       	mov	r24, r18
 de0:	76 2f       	mov	r23, r22
 de2:	6a 2f       	mov	r22, r26
 de4:	11 24       	eor	r1, r1
 de6:	9f 57       	subi	r25, 0x7F	; 127
 de8:	50 40       	sbci	r21, 0x00	; 0
 dea:	8a f0       	brmi	.+34     	; 0xe0e <__mulsf3_pse+0x84>
 dec:	e1 f0       	breq	.+56     	; 0xe26 <__mulsf3_pse+0x9c>
 dee:	88 23       	and	r24, r24
 df0:	4a f0       	brmi	.+18     	; 0xe04 <__mulsf3_pse+0x7a>
 df2:	ee 0f       	add	r30, r30
 df4:	ff 1f       	adc	r31, r31
 df6:	bb 1f       	adc	r27, r27
 df8:	66 1f       	adc	r22, r22
 dfa:	77 1f       	adc	r23, r23
 dfc:	88 1f       	adc	r24, r24
 dfe:	91 50       	subi	r25, 0x01	; 1
 e00:	50 40       	sbci	r21, 0x00	; 0
 e02:	a9 f7       	brne	.-22     	; 0xdee <__mulsf3_pse+0x64>
 e04:	9e 3f       	cpi	r25, 0xFE	; 254
 e06:	51 05       	cpc	r21, r1
 e08:	70 f0       	brcs	.+28     	; 0xe26 <__mulsf3_pse+0x9c>
 e0a:	14 c0       	rjmp	.+40     	; 0xe34 <__fp_inf>
 e0c:	a6 cf       	rjmp	.-180    	; 0xd5a <__fp_szero>
 e0e:	5f 3f       	cpi	r21, 0xFF	; 255
 e10:	ec f3       	brlt	.-6      	; 0xe0c <__mulsf3_pse+0x82>
 e12:	98 3e       	cpi	r25, 0xE8	; 232
 e14:	dc f3       	brlt	.-10     	; 0xe0c <__mulsf3_pse+0x82>
 e16:	86 95       	lsr	r24
 e18:	77 95       	ror	r23
 e1a:	67 95       	ror	r22
 e1c:	b7 95       	ror	r27
 e1e:	f7 95       	ror	r31
 e20:	e7 95       	ror	r30
 e22:	9f 5f       	subi	r25, 0xFF	; 255
 e24:	c1 f7       	brne	.-16     	; 0xe16 <__mulsf3_pse+0x8c>
 e26:	fe 2b       	or	r31, r30
 e28:	88 0f       	add	r24, r24
 e2a:	91 1d       	adc	r25, r1
 e2c:	96 95       	lsr	r25
 e2e:	87 95       	ror	r24
 e30:	97 f9       	bld	r25, 7
 e32:	08 95       	ret

00000e34 <__fp_inf>:
 e34:	97 f9       	bld	r25, 7
 e36:	9f 67       	ori	r25, 0x7F	; 127
 e38:	80 e8       	ldi	r24, 0x80	; 128
 e3a:	70 e0       	ldi	r23, 0x00	; 0
 e3c:	60 e0       	ldi	r22, 0x00	; 0
 e3e:	08 95       	ret

00000e40 <__fp_nan>:
 e40:	9f ef       	ldi	r25, 0xFF	; 255
 e42:	80 ec       	ldi	r24, 0xC0	; 192
 e44:	08 95       	ret

00000e46 <__fp_pscA>:
 e46:	00 24       	eor	r0, r0
 e48:	0a 94       	dec	r0
 e4a:	16 16       	cp	r1, r22
 e4c:	17 06       	cpc	r1, r23
 e4e:	18 06       	cpc	r1, r24
 e50:	09 06       	cpc	r0, r25
 e52:	08 95       	ret

00000e54 <__fp_pscB>:
 e54:	00 24       	eor	r0, r0
 e56:	0a 94       	dec	r0
 e58:	12 16       	cp	r1, r18
 e5a:	13 06       	cpc	r1, r19
 e5c:	14 06       	cpc	r1, r20
 e5e:	05 06       	cpc	r0, r21
 e60:	08 95       	ret

00000e62 <__fp_round>:
 e62:	09 2e       	mov	r0, r25
 e64:	03 94       	inc	r0
 e66:	00 0c       	add	r0, r0
 e68:	11 f4       	brne	.+4      	; 0xe6e <__fp_round+0xc>
 e6a:	88 23       	and	r24, r24
 e6c:	52 f0       	brmi	.+20     	; 0xe82 <__fp_round+0x20>
 e6e:	bb 0f       	add	r27, r27
 e70:	40 f4       	brcc	.+16     	; 0xe82 <__fp_round+0x20>
 e72:	bf 2b       	or	r27, r31
 e74:	11 f4       	brne	.+4      	; 0xe7a <__fp_round+0x18>
 e76:	60 ff       	sbrs	r22, 0
 e78:	04 c0       	rjmp	.+8      	; 0xe82 <__fp_round+0x20>
 e7a:	6f 5f       	subi	r22, 0xFF	; 255
 e7c:	7f 4f       	sbci	r23, 0xFF	; 255
 e7e:	8f 4f       	sbci	r24, 0xFF	; 255
 e80:	9f 4f       	sbci	r25, 0xFF	; 255
 e82:	08 95       	ret

00000e84 <_exit>:
 e84:	f8 94       	cli

00000e86 <__stop_program>:
 e86:	ff cf       	rjmp	.-2      	; 0xe86 <__stop_program>
