
Lab1_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000065c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000608  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df2  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3b  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000488  00000000  00000000  00002131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000025bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000596  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  00002be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	86 c2       	rjmp	.+1292   	; 0x604 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#define Start		01
#define Pause		02
#define Reset		04

int main(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	1f 92       	push	r1
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    io_init();			//initialize IO
 104:	09 d0       	rcall	.+18     	; 0x118 <io_init>
	uint8_t input_sw;	//declare variable input_sw
    while (1)			//begin while(1) loop
    {
		input_sw = PINC & ( (1<<PC0) | (1<<PC1) | (1<<PC2));
 106:	86 e2       	ldi	r24, 0x26	; 38
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	80 81       	ld	r24, Z
 10e:	87 70       	andi	r24, 0x07	; 7
 110:	89 83       	std	Y+1, r24	; 0x01
		//PORTB = PORTB ^ 0x80;		//set led on pin13 to high (p1)
		//_delay_ms(500);		//delay by 500ms
		
		LED_Sweep(input_sw); //(p4)
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	1a d0       	rcall	.+52     	; 0x14a <LED_Sweep>
    }
 116:	f7 cf       	rjmp	.-18     	; 0x106 <main+0xc>

00000118 <io_init>:
}

void io_init(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	//DDRB = 0x80;			//LED 13 set as output
	//PORTB = 0x00;		//turn off LED at initialization
	
	DDRA = 0xFF;		//set port A pins 0-7 to outputs
 120:	81 e2       	ldi	r24, 0x21	; 33
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	PORTA = 0x00;		//set output of PORTA pins to low
 12a:	82 e2       	ldi	r24, 0x22	; 34
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	10 82       	st	Z, r1
	
	DDRC = 0x00;
 132:	87 e2       	ldi	r24, 0x27	; 39
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	10 82       	st	Z, r1
	PORTC = 0x00;
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	10 82       	st	Z, r1
}
 142:	00 00       	nop
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <LED_Sweep>:

void LED_Sweep(uint8_t input_sw)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	6e 97       	sbiw	r28, 0x1e	; 30
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	8e 8f       	std	Y+30, r24	; 0x1e
	if (input_sw & Start)
 160:	8e 8d       	ldd	r24, Y+30	; 0x1e
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	81 70       	andi	r24, 0x01	; 1
 168:	99 27       	eor	r25, r25
 16a:	89 2b       	or	r24, r25
 16c:	09 f4       	brne	.+2      	; 0x170 <LED_Sweep+0x26>
 16e:	34 c1       	rjmp	.+616    	; 0x3d8 <LED_Sweep+0x28e>
	{
		for(int8_t i = 0; i < 16; i++) { //begin for loop for 16 states
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	2e c1       	rjmp	.+604    	; 0x3d0 <LED_Sweep+0x286>
			input_sw = PINC & ( (1<<PC0) | (1<<PC1) | (1<<PC2));
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	87 70       	andi	r24, 0x07	; 7
 17e:	8e 8f       	std	Y+30, r24	; 0x1e
			if (i < 8)	//while counting up for first 8 bits
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	0c f0       	brlt	.+2      	; 0x188 <LED_Sweep+0x3e>
 186:	81 c0       	rjmp	.+258    	; 0x28a <LED_Sweep+0x140>
			{
				PORTA |= PINA + 1; //count up bit wise
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	4f 5f       	subi	r20, 0xFF	; 255
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	82 e2       	ldi	r24, 0x22	; 34
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	22 e2       	ldi	r18, 0x22	; 34
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	32 2f       	mov	r19, r18
 1a8:	24 2f       	mov	r18, r20
 1aa:	23 2b       	or	r18, r19
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	a8 ec       	ldi	r26, 0xC8	; 200
 1b6:	b2 e4       	ldi	r27, 0x42	; 66
 1b8:	8e 83       	std	Y+6, r24	; 0x06
 1ba:	9f 83       	std	Y+7, r25	; 0x07
 1bc:	a8 87       	std	Y+8, r26	; 0x08
 1be:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	4a e7       	ldi	r20, 0x7A	; 122
 1c6:	55 e4       	ldi	r21, 0x45	; 69
 1c8:	6e 81       	ldd	r22, Y+6	; 0x06
 1ca:	7f 81       	ldd	r23, Y+7	; 0x07
 1cc:	88 85       	ldd	r24, Y+8	; 0x08
 1ce:	99 85       	ldd	r25, Y+9	; 0x09
 1d0:	8e d1       	rcall	.+796    	; 0x4ee <__mulsf3>
 1d2:	dc 01       	movw	r26, r24
 1d4:	cb 01       	movw	r24, r22
 1d6:	8a 87       	std	Y+10, r24	; 0x0a
 1d8:	9b 87       	std	Y+11, r25	; 0x0b
 1da:	ac 87       	std	Y+12, r26	; 0x0c
 1dc:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e8       	ldi	r20, 0x80	; 128
 1e4:	5f e3       	ldi	r21, 0x3F	; 63
 1e6:	6a 85       	ldd	r22, Y+10	; 0x0a
 1e8:	7b 85       	ldd	r23, Y+11	; 0x0b
 1ea:	8c 85       	ldd	r24, Y+12	; 0x0c
 1ec:	9d 85       	ldd	r25, Y+13	; 0x0d
 1ee:	fe d0       	rcall	.+508    	; 0x3ec <__cmpsf2>
 1f0:	88 23       	and	r24, r24
 1f2:	2c f4       	brge	.+10     	; 0x1fe <LED_Sweep+0xb4>
		__ticks = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	9f 87       	std	Y+15, r25	; 0x0f
 1fa:	8e 87       	std	Y+14, r24	; 0x0e
 1fc:	3b c0       	rjmp	.+118    	; 0x274 <LED_Sweep+0x12a>
	else if (__tmp > 65535)
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	3f ef       	ldi	r19, 0xFF	; 255
 202:	4f e7       	ldi	r20, 0x7F	; 127
 204:	57 e4       	ldi	r21, 0x47	; 71
 206:	6a 85       	ldd	r22, Y+10	; 0x0a
 208:	7b 85       	ldd	r23, Y+11	; 0x0b
 20a:	8c 85       	ldd	r24, Y+12	; 0x0c
 20c:	9d 85       	ldd	r25, Y+13	; 0x0d
 20e:	6b d1       	rcall	.+726    	; 0x4e6 <__gesf2>
 210:	18 16       	cp	r1, r24
 212:	3c f5       	brge	.+78     	; 0x262 <LED_Sweep+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e2       	ldi	r20, 0x20	; 32
 21a:	51 e4       	ldi	r21, 0x41	; 65
 21c:	6e 81       	ldd	r22, Y+6	; 0x06
 21e:	7f 81       	ldd	r23, Y+7	; 0x07
 220:	88 85       	ldd	r24, Y+8	; 0x08
 222:	99 85       	ldd	r25, Y+9	; 0x09
 224:	64 d1       	rcall	.+712    	; 0x4ee <__mulsf3>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	e2 d0       	rcall	.+452    	; 0x3f4 <__fixunssfsi>
 230:	dc 01       	movw	r26, r24
 232:	cb 01       	movw	r24, r22
 234:	9f 87       	std	Y+15, r25	; 0x0f
 236:	8e 87       	std	Y+14, r24	; 0x0e
 238:	0f c0       	rjmp	.+30     	; 0x258 <LED_Sweep+0x10e>
 23a:	80 e9       	ldi	r24, 0x90	; 144
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	99 8b       	std	Y+17, r25	; 0x11
 240:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 242:	88 89       	ldd	r24, Y+16	; 0x10
 244:	99 89       	ldd	r25, Y+17	; 0x11
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LED_Sweep+0xfc>
 24a:	99 8b       	std	Y+17, r25	; 0x11
 24c:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24e:	8e 85       	ldd	r24, Y+14	; 0x0e
 250:	9f 85       	ldd	r25, Y+15	; 0x0f
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	9f 87       	std	Y+15, r25	; 0x0f
 256:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 258:	8e 85       	ldd	r24, Y+14	; 0x0e
 25a:	9f 85       	ldd	r25, Y+15	; 0x0f
 25c:	89 2b       	or	r24, r25
 25e:	69 f7       	brne	.-38     	; 0x23a <LED_Sweep+0xf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 260:	92 c0       	rjmp	.+292    	; 0x386 <LED_Sweep+0x23c>
 262:	6a 85       	ldd	r22, Y+10	; 0x0a
 264:	7b 85       	ldd	r23, Y+11	; 0x0b
 266:	8c 85       	ldd	r24, Y+12	; 0x0c
 268:	9d 85       	ldd	r25, Y+13	; 0x0d
 26a:	c4 d0       	rcall	.+392    	; 0x3f4 <__fixunssfsi>
 26c:	dc 01       	movw	r26, r24
 26e:	cb 01       	movw	r24, r22
 270:	9f 87       	std	Y+15, r25	; 0x0f
 272:	8e 87       	std	Y+14, r24	; 0x0e
 274:	8e 85       	ldd	r24, Y+14	; 0x0e
 276:	9f 85       	ldd	r25, Y+15	; 0x0f
 278:	9b 8b       	std	Y+19, r25	; 0x13
 27a:	8a 8b       	std	Y+18, r24	; 0x12
 27c:	8a 89       	ldd	r24, Y+18	; 0x12
 27e:	9b 89       	ldd	r25, Y+19	; 0x13
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LED_Sweep+0x136>
 284:	9b 8b       	std	Y+19, r25	; 0x13
 286:	8a 8b       	std	Y+18, r24	; 0x12
 288:	7e c0       	rjmp	.+252    	; 0x386 <LED_Sweep+0x23c>
				_delay_ms(100);		//delay by 500ms
			}
			else  //once finished filling all bits
			{
				PORTA &= PINA >> 1; //clear bits from left to right
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	80 81       	ld	r24, Z
 292:	86 95       	lsr	r24
 294:	48 2f       	mov	r20, r24
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	82 e2       	ldi	r24, 0x22	; 34
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	22 e2       	ldi	r18, 0x22	; 34
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	32 2f       	mov	r19, r18
 2a6:	24 2f       	mov	r18, r20
 2a8:	23 23       	and	r18, r19
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a8 ec       	ldi	r26, 0xC8	; 200
 2b4:	b2 e4       	ldi	r27, 0x42	; 66
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	9b 83       	std	Y+3, r25	; 0x03
 2ba:	ac 83       	std	Y+4, r26	; 0x04
 2bc:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	4a e7       	ldi	r20, 0x7A	; 122
 2c4:	55 e4       	ldi	r21, 0x45	; 69
 2c6:	6a 81       	ldd	r22, Y+2	; 0x02
 2c8:	7b 81       	ldd	r23, Y+3	; 0x03
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	9d 81       	ldd	r25, Y+5	; 0x05
 2ce:	0f d1       	rcall	.+542    	; 0x4ee <__mulsf3>
 2d0:	dc 01       	movw	r26, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	8c 8b       	std	Y+20, r24	; 0x14
 2d6:	9d 8b       	std	Y+21, r25	; 0x15
 2d8:	ae 8b       	std	Y+22, r26	; 0x16
 2da:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e8       	ldi	r20, 0x80	; 128
 2e2:	5f e3       	ldi	r21, 0x3F	; 63
 2e4:	6c 89       	ldd	r22, Y+20	; 0x14
 2e6:	7d 89       	ldd	r23, Y+21	; 0x15
 2e8:	8e 89       	ldd	r24, Y+22	; 0x16
 2ea:	9f 89       	ldd	r25, Y+23	; 0x17
 2ec:	7f d0       	rcall	.+254    	; 0x3ec <__cmpsf2>
 2ee:	88 23       	and	r24, r24
 2f0:	2c f4       	brge	.+10     	; 0x2fc <LED_Sweep+0x1b2>
		__ticks = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	99 8f       	std	Y+25, r25	; 0x19
 2f8:	88 8f       	std	Y+24, r24	; 0x18
 2fa:	3b c0       	rjmp	.+118    	; 0x372 <LED_Sweep+0x228>
	else if (__tmp > 65535)
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	3f ef       	ldi	r19, 0xFF	; 255
 300:	4f e7       	ldi	r20, 0x7F	; 127
 302:	57 e4       	ldi	r21, 0x47	; 71
 304:	6c 89       	ldd	r22, Y+20	; 0x14
 306:	7d 89       	ldd	r23, Y+21	; 0x15
 308:	8e 89       	ldd	r24, Y+22	; 0x16
 30a:	9f 89       	ldd	r25, Y+23	; 0x17
 30c:	ec d0       	rcall	.+472    	; 0x4e6 <__gesf2>
 30e:	18 16       	cp	r1, r24
 310:	3c f5       	brge	.+78     	; 0x360 <LED_Sweep+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e2       	ldi	r20, 0x20	; 32
 318:	51 e4       	ldi	r21, 0x41	; 65
 31a:	6a 81       	ldd	r22, Y+2	; 0x02
 31c:	7b 81       	ldd	r23, Y+3	; 0x03
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	9d 81       	ldd	r25, Y+5	; 0x05
 322:	e5 d0       	rcall	.+458    	; 0x4ee <__mulsf3>
 324:	dc 01       	movw	r26, r24
 326:	cb 01       	movw	r24, r22
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	63 d0       	rcall	.+198    	; 0x3f4 <__fixunssfsi>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	99 8f       	std	Y+25, r25	; 0x19
 334:	88 8f       	std	Y+24, r24	; 0x18
 336:	0f c0       	rjmp	.+30     	; 0x356 <LED_Sweep+0x20c>
 338:	80 e9       	ldi	r24, 0x90	; 144
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	9b 8f       	std	Y+27, r25	; 0x1b
 33e:	8a 8f       	std	Y+26, r24	; 0x1a
 340:	8a 8d       	ldd	r24, Y+26	; 0x1a
 342:	9b 8d       	ldd	r25, Y+27	; 0x1b
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LED_Sweep+0x1fa>
 348:	9b 8f       	std	Y+27, r25	; 0x1b
 34a:	8a 8f       	std	Y+26, r24	; 0x1a
 34c:	88 8d       	ldd	r24, Y+24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34e:	99 8d       	ldd	r25, Y+25	; 0x19
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	99 8f       	std	Y+25, r25	; 0x19
 354:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 356:	88 8d       	ldd	r24, Y+24	; 0x18
 358:	99 8d       	ldd	r25, Y+25	; 0x19
 35a:	89 2b       	or	r24, r25
 35c:	69 f7       	brne	.-38     	; 0x338 <LED_Sweep+0x1ee>
 35e:	13 c0       	rjmp	.+38     	; 0x386 <LED_Sweep+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 360:	6c 89       	ldd	r22, Y+20	; 0x14
 362:	7d 89       	ldd	r23, Y+21	; 0x15
 364:	8e 89       	ldd	r24, Y+22	; 0x16
 366:	9f 89       	ldd	r25, Y+23	; 0x17
 368:	45 d0       	rcall	.+138    	; 0x3f4 <__fixunssfsi>
 36a:	dc 01       	movw	r26, r24
 36c:	cb 01       	movw	r24, r22
 36e:	99 8f       	std	Y+25, r25	; 0x19
 370:	88 8f       	std	Y+24, r24	; 0x18
 372:	88 8d       	ldd	r24, Y+24	; 0x18
 374:	99 8d       	ldd	r25, Y+25	; 0x19
 376:	9d 8f       	std	Y+29, r25	; 0x1d
 378:	8c 8f       	std	Y+28, r24	; 0x1c
 37a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 37c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LED_Sweep+0x234>
 382:	9d 8f       	std	Y+29, r25	; 0x1d
 384:	8c 8f       	std	Y+28, r24	; 0x1c
 386:	8e 8d       	ldd	r24, Y+30	; 0x1e
				_delay_ms(100);		//delay by 500ms
			}
			
			if (input_sw & Pause)
 388:	88 2f       	mov	r24, r24
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	82 70       	andi	r24, 0x02	; 2
 38e:	99 27       	eor	r25, r25
 390:	89 2b       	or	r24, r25
 392:	71 f0       	breq	.+28     	; 0x3b0 <LED_Sweep+0x266>
 394:	06 c0       	rjmp	.+12     	; 0x3a2 <LED_Sweep+0x258>
			{
				while (input_sw & Pause) {
 396:	86 e2       	ldi	r24, 0x26	; 38
					input_sw = PINC & ( (1<<PC0) | (1<<PC1) | (1<<PC2));
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	87 70       	andi	r24, 0x07	; 7
 3a0:	8e 8f       	std	Y+30, r24	; 0x1e
 3a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
				_delay_ms(100);		//delay by 500ms
			}
			
			if (input_sw & Pause)
			{
				while (input_sw & Pause) {
 3a4:	88 2f       	mov	r24, r24
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	82 70       	andi	r24, 0x02	; 2
 3aa:	99 27       	eor	r25, r25
 3ac:	89 2b       	or	r24, r25
 3ae:	99 f7       	brne	.-26     	; 0x396 <LED_Sweep+0x24c>
 3b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
					input_sw = PINC & ( (1<<PC0) | (1<<PC1) | (1<<PC2));
				}
			}
			
			if (input_sw & Reset)
 3b2:	88 2f       	mov	r24, r24
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	84 70       	andi	r24, 0x04	; 4
 3b8:	99 27       	eor	r25, r25
 3ba:	89 2b       	or	r24, r25
 3bc:	31 f0       	breq	.+12     	; 0x3ca <LED_Sweep+0x280>
 3be:	82 e2       	ldi	r24, 0x22	; 34
			{
				PORTA = 0x00;
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	fc 01       	movw	r30, r24
 3c4:	10 82       	st	Z, r1
 3c6:	00 00       	nop
				break;
 3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <LED_Sweep+0x28e>
			}
		}
	}
}
 3ca:	89 81       	ldd	r24, Y+1	; 0x01

void LED_Sweep(uint8_t input_sw)
{
	if (input_sw & Start)
	{
		for(int8_t i = 0; i < 16; i++) { //begin for loop for 16 states
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	0c f4       	brge	.+2      	; 0x3d8 <LED_Sweep+0x28e>
 3d6:	ce ce       	rjmp	.-612    	; 0x174 <LED_Sweep+0x2a>
 3d8:	00 00       	nop
				PORTA = 0x00;
				break;
			}
		}
	}
}
 3da:	6e 96       	adiw	r28, 0x1e	; 30
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <__cmpsf2>:
 3ec:	2f d0       	rcall	.+94     	; 0x44c <__fp_cmp>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <__cmpsf2+0x6>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret

000003f4 <__fixunssfsi>:
 3f4:	57 d0       	rcall	.+174    	; 0x4a4 <__fp_splitA>
 3f6:	88 f0       	brcs	.+34     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f8:	9f 57       	subi	r25, 0x7F	; 127
 3fa:	90 f0       	brcs	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fc:	b9 2f       	mov	r27, r25
 3fe:	99 27       	eor	r25, r25
 400:	b7 51       	subi	r27, 0x17	; 23
 402:	a0 f0       	brcs	.+40     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 404:	d1 f0       	breq	.+52     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	1a f0       	brmi	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 410:	ba 95       	dec	r27
 412:	c9 f7       	brne	.-14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 414:	12 c0       	rjmp	.+36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 416:	b1 30       	cpi	r27, 0x01	; 1
 418:	81 f0       	breq	.+32     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41a:	5e d0       	rcall	.+188    	; 0x4d8 <__fp_zero>
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	08 95       	ret
 420:	5b c0       	rjmp	.+182    	; 0x4d8 <__fp_zero>
 422:	67 2f       	mov	r22, r23
 424:	78 2f       	mov	r23, r24
 426:	88 27       	eor	r24, r24
 428:	b8 5f       	subi	r27, 0xF8	; 248
 42a:	39 f0       	breq	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	b9 3f       	cpi	r27, 0xF9	; 249
 42e:	cc f3       	brlt	.-14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 430:	86 95       	lsr	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	b3 95       	inc	r27
 438:	d9 f7       	brne	.-10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 43a:	3e f4       	brtc	.+14     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43c:	90 95       	com	r25
 43e:	80 95       	com	r24
 440:	70 95       	com	r23
 442:	61 95       	neg	r22
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	8f 4f       	sbci	r24, 0xFF	; 255
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	08 95       	ret

0000044c <__fp_cmp>:
 44c:	99 0f       	add	r25, r25
 44e:	00 08       	sbc	r0, r0
 450:	55 0f       	add	r21, r21
 452:	aa 0b       	sbc	r26, r26
 454:	e0 e8       	ldi	r30, 0x80	; 128
 456:	fe ef       	ldi	r31, 0xFE	; 254
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	e8 07       	cpc	r30, r24
 45e:	f9 07       	cpc	r31, r25
 460:	c0 f0       	brcs	.+48     	; 0x492 <__fp_cmp+0x46>
 462:	12 16       	cp	r1, r18
 464:	13 06       	cpc	r1, r19
 466:	e4 07       	cpc	r30, r20
 468:	f5 07       	cpc	r31, r21
 46a:	98 f0       	brcs	.+38     	; 0x492 <__fp_cmp+0x46>
 46c:	62 1b       	sub	r22, r18
 46e:	73 0b       	sbc	r23, r19
 470:	84 0b       	sbc	r24, r20
 472:	95 0b       	sbc	r25, r21
 474:	39 f4       	brne	.+14     	; 0x484 <__fp_cmp+0x38>
 476:	0a 26       	eor	r0, r26
 478:	61 f0       	breq	.+24     	; 0x492 <__fp_cmp+0x46>
 47a:	23 2b       	or	r18, r19
 47c:	24 2b       	or	r18, r20
 47e:	25 2b       	or	r18, r21
 480:	21 f4       	brne	.+8      	; 0x48a <__fp_cmp+0x3e>
 482:	08 95       	ret
 484:	0a 26       	eor	r0, r26
 486:	09 f4       	brne	.+2      	; 0x48a <__fp_cmp+0x3e>
 488:	a1 40       	sbci	r26, 0x01	; 1
 48a:	a6 95       	lsr	r26
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	81 1d       	adc	r24, r1
 490:	81 1d       	adc	r24, r1
 492:	08 95       	ret

00000494 <__fp_split3>:
 494:	57 fd       	sbrc	r21, 7
 496:	90 58       	subi	r25, 0x80	; 128
 498:	44 0f       	add	r20, r20
 49a:	55 1f       	adc	r21, r21
 49c:	59 f0       	breq	.+22     	; 0x4b4 <__fp_splitA+0x10>
 49e:	5f 3f       	cpi	r21, 0xFF	; 255
 4a0:	71 f0       	breq	.+28     	; 0x4be <__fp_splitA+0x1a>
 4a2:	47 95       	ror	r20

000004a4 <__fp_splitA>:
 4a4:	88 0f       	add	r24, r24
 4a6:	97 fb       	bst	r25, 7
 4a8:	99 1f       	adc	r25, r25
 4aa:	61 f0       	breq	.+24     	; 0x4c4 <__fp_splitA+0x20>
 4ac:	9f 3f       	cpi	r25, 0xFF	; 255
 4ae:	79 f0       	breq	.+30     	; 0x4ce <__fp_splitA+0x2a>
 4b0:	87 95       	ror	r24
 4b2:	08 95       	ret
 4b4:	12 16       	cp	r1, r18
 4b6:	13 06       	cpc	r1, r19
 4b8:	14 06       	cpc	r1, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	f2 cf       	rjmp	.-28     	; 0x4a2 <__fp_split3+0xe>
 4be:	46 95       	lsr	r20
 4c0:	f1 df       	rcall	.-30     	; 0x4a4 <__fp_splitA>
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <__fp_splitA+0x30>
 4c4:	16 16       	cp	r1, r22
 4c6:	17 06       	cpc	r1, r23
 4c8:	18 06       	cpc	r1, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <__fp_splitA+0xc>
 4ce:	86 95       	lsr	r24
 4d0:	71 05       	cpc	r23, r1
 4d2:	61 05       	cpc	r22, r1
 4d4:	08 94       	sec
 4d6:	08 95       	ret

000004d8 <__fp_zero>:
 4d8:	e8 94       	clt

000004da <__fp_szero>:
 4da:	bb 27       	eor	r27, r27
 4dc:	66 27       	eor	r22, r22
 4de:	77 27       	eor	r23, r23
 4e0:	cb 01       	movw	r24, r22
 4e2:	97 f9       	bld	r25, 7
 4e4:	08 95       	ret

000004e6 <__gesf2>:
 4e6:	b2 df       	rcall	.-156    	; 0x44c <__fp_cmp>
 4e8:	08 f4       	brcc	.+2      	; 0x4ec <__gesf2+0x6>
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <__mulsf3>:
 4ee:	0b d0       	rcall	.+22     	; 0x506 <__mulsf3x>
 4f0:	78 c0       	rjmp	.+240    	; 0x5e2 <__fp_round>
 4f2:	69 d0       	rcall	.+210    	; 0x5c6 <__fp_pscA>
 4f4:	28 f0       	brcs	.+10     	; 0x500 <__mulsf3+0x12>
 4f6:	6e d0       	rcall	.+220    	; 0x5d4 <__fp_pscB>
 4f8:	18 f0       	brcs	.+6      	; 0x500 <__mulsf3+0x12>
 4fa:	95 23       	and	r25, r21
 4fc:	09 f0       	breq	.+2      	; 0x500 <__mulsf3+0x12>
 4fe:	5a c0       	rjmp	.+180    	; 0x5b4 <__fp_inf>
 500:	5f c0       	rjmp	.+190    	; 0x5c0 <__fp_nan>
 502:	11 24       	eor	r1, r1
 504:	ea cf       	rjmp	.-44     	; 0x4da <__fp_szero>

00000506 <__mulsf3x>:
 506:	c6 df       	rcall	.-116    	; 0x494 <__fp_split3>
 508:	a0 f3       	brcs	.-24     	; 0x4f2 <__mulsf3+0x4>

0000050a <__mulsf3_pse>:
 50a:	95 9f       	mul	r25, r21
 50c:	d1 f3       	breq	.-12     	; 0x502 <__mulsf3+0x14>
 50e:	95 0f       	add	r25, r21
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	55 1f       	adc	r21, r21
 514:	62 9f       	mul	r22, r18
 516:	f0 01       	movw	r30, r0
 518:	72 9f       	mul	r23, r18
 51a:	bb 27       	eor	r27, r27
 51c:	f0 0d       	add	r31, r0
 51e:	b1 1d       	adc	r27, r1
 520:	63 9f       	mul	r22, r19
 522:	aa 27       	eor	r26, r26
 524:	f0 0d       	add	r31, r0
 526:	b1 1d       	adc	r27, r1
 528:	aa 1f       	adc	r26, r26
 52a:	64 9f       	mul	r22, r20
 52c:	66 27       	eor	r22, r22
 52e:	b0 0d       	add	r27, r0
 530:	a1 1d       	adc	r26, r1
 532:	66 1f       	adc	r22, r22
 534:	82 9f       	mul	r24, r18
 536:	22 27       	eor	r18, r18
 538:	b0 0d       	add	r27, r0
 53a:	a1 1d       	adc	r26, r1
 53c:	62 1f       	adc	r22, r18
 53e:	73 9f       	mul	r23, r19
 540:	b0 0d       	add	r27, r0
 542:	a1 1d       	adc	r26, r1
 544:	62 1f       	adc	r22, r18
 546:	83 9f       	mul	r24, r19
 548:	a0 0d       	add	r26, r0
 54a:	61 1d       	adc	r22, r1
 54c:	22 1f       	adc	r18, r18
 54e:	74 9f       	mul	r23, r20
 550:	33 27       	eor	r19, r19
 552:	a0 0d       	add	r26, r0
 554:	61 1d       	adc	r22, r1
 556:	23 1f       	adc	r18, r19
 558:	84 9f       	mul	r24, r20
 55a:	60 0d       	add	r22, r0
 55c:	21 1d       	adc	r18, r1
 55e:	82 2f       	mov	r24, r18
 560:	76 2f       	mov	r23, r22
 562:	6a 2f       	mov	r22, r26
 564:	11 24       	eor	r1, r1
 566:	9f 57       	subi	r25, 0x7F	; 127
 568:	50 40       	sbci	r21, 0x00	; 0
 56a:	8a f0       	brmi	.+34     	; 0x58e <__mulsf3_pse+0x84>
 56c:	e1 f0       	breq	.+56     	; 0x5a6 <__mulsf3_pse+0x9c>
 56e:	88 23       	and	r24, r24
 570:	4a f0       	brmi	.+18     	; 0x584 <__mulsf3_pse+0x7a>
 572:	ee 0f       	add	r30, r30
 574:	ff 1f       	adc	r31, r31
 576:	bb 1f       	adc	r27, r27
 578:	66 1f       	adc	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	a9 f7       	brne	.-22     	; 0x56e <__mulsf3_pse+0x64>
 584:	9e 3f       	cpi	r25, 0xFE	; 254
 586:	51 05       	cpc	r21, r1
 588:	70 f0       	brcs	.+28     	; 0x5a6 <__mulsf3_pse+0x9c>
 58a:	14 c0       	rjmp	.+40     	; 0x5b4 <__fp_inf>
 58c:	a6 cf       	rjmp	.-180    	; 0x4da <__fp_szero>
 58e:	5f 3f       	cpi	r21, 0xFF	; 255
 590:	ec f3       	brlt	.-6      	; 0x58c <__mulsf3_pse+0x82>
 592:	98 3e       	cpi	r25, 0xE8	; 232
 594:	dc f3       	brlt	.-10     	; 0x58c <__mulsf3_pse+0x82>
 596:	86 95       	lsr	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f7 95       	ror	r31
 5a0:	e7 95       	ror	r30
 5a2:	9f 5f       	subi	r25, 0xFF	; 255
 5a4:	c1 f7       	brne	.-16     	; 0x596 <__mulsf3_pse+0x8c>
 5a6:	fe 2b       	or	r31, r30
 5a8:	88 0f       	add	r24, r24
 5aa:	91 1d       	adc	r25, r1
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <__fp_inf>:
 5b4:	97 f9       	bld	r25, 7
 5b6:	9f 67       	ori	r25, 0x7F	; 127
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	08 95       	ret

000005c0 <__fp_nan>:
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
 5c4:	08 95       	ret

000005c6 <__fp_pscA>:
 5c6:	00 24       	eor	r0, r0
 5c8:	0a 94       	dec	r0
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	09 06       	cpc	r0, r25
 5d2:	08 95       	ret

000005d4 <__fp_pscB>:
 5d4:	00 24       	eor	r0, r0
 5d6:	0a 94       	dec	r0
 5d8:	12 16       	cp	r1, r18
 5da:	13 06       	cpc	r1, r19
 5dc:	14 06       	cpc	r1, r20
 5de:	05 06       	cpc	r0, r21
 5e0:	08 95       	ret

000005e2 <__fp_round>:
 5e2:	09 2e       	mov	r0, r25
 5e4:	03 94       	inc	r0
 5e6:	00 0c       	add	r0, r0
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0xc>
 5ea:	88 23       	and	r24, r24
 5ec:	52 f0       	brmi	.+20     	; 0x602 <__fp_round+0x20>
 5ee:	bb 0f       	add	r27, r27
 5f0:	40 f4       	brcc	.+16     	; 0x602 <__fp_round+0x20>
 5f2:	bf 2b       	or	r27, r31
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0x18>
 5f6:	60 ff       	sbrs	r22, 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <__fp_round+0x20>
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	08 95       	ret

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
